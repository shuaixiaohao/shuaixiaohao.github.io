<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>HTML学习</title>
      <link href="/2018/05/29/HTML%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/29/HTML%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML?"></a>什么是HTML?</h3><p>HTML 是用来描述网页的一种语言。</p><ol><li>Tag: Content 装内容装数据</li><li>CSS: Display 渲染,显示 </li><li>JavaScript: Behavior 交互,行为</li></ol><a id="more"></a><ul><li>HTML 指的是超文本标记语言: <strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li><li>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</li><li>标记语言是一套<strong>标记标签</strong> (markup tag)</li><li>HTML 使用标记标签来<strong>描述</strong>网页</li><li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong> 内容</li><li>HTML文档也叫做<strong>web 页面</strong></li></ul><h4 id="HTML格式"><a href="#HTML格式" class="headerlink" title="HTML格式"></a>HTML格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>主题title&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>&lt;!DOCTYPE html&gt; 声明为 HTML5 文档</p><p><html>  元素是 HTML 页面的根元素</html></p><p><head>  元素包含了文档的元（meta）数据</head></p><p><title>  元素描述了文档的标题</title></p><p><body>  元素包含了可见的页面内容</body></p><p></p><h1>  元素定义一个大标题<p></p><p></p><p>  元素定义一个段落</p><p><hr> 水平分割线</p><p><br>折行符</p><p><sub>\</sub> 下标标签</p><p><sup>\</sup> 上标标签</p><p><strong>\</strong> 强调标签,变粗</p><p><em>\</em> 强调标签,斜体</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>芒果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器显示:</p><ul><li>苹果</li><li>草莓</li><li>芒果</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>芒果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器显示:</p><ol><li>苹果</li><li>草莓</li><li>芒果</li></ol><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><p><dl> 标签定义一个描述列表。</dl></p><p><dl> 标签与 <dt> （定义项目/名字）和 <dd> （描述每一个项目/名字）一起使用。</dd></dt></dl></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>星期<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>1 2 3 4 5 6 7<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>月份<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>1 2 3 4 5 6 7 8 9 10 11 12<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器显示:</p><p>星期<br>​    1 2 3 4 5 6 7<br>月份<br>​    1 2 3 4 5 6 7 8 9 10 11 12</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>href</code>属性描述了链接的目标。</p><h4 id="页面链接"><a href="#页面链接" class="headerlink" title="页面链接"></a>页面链接</h4><!-- 页面链接:可以链接到其他网站也可以链接到自己的页面 --><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前页面跳转,target="_self"可以不写</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">打开新页面跳转</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.qq.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>腾讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="锚点链接-id属性"><a href="#锚点链接-id属性" class="headerlink" title="锚点链接(id属性)"></a>锚点链接(id属性)</h4><!-- 锚点链接:链接到指定位置 --><p>id属性可用于创建在一个HTML文档书签标记。</p><p>id=”tips”          tips-提示部分,自己定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span>Hello,word!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="功能性链接"><a href="#功能性链接" class="headerlink" title="功能性链接"></a>功能性链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">自动弹出发邮箱功能</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:fenghao1994@163.com"</span>&gt;</span>联系站长<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">发起消息会话,wp.qq.com网站自动生成</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"http://wpa.qq.com/pa?p=2::52"</span> <span class="attr">alt</span>=<span class="string">"联系客服"</span> <span class="attr">title</span>=<span class="string">"联系客服"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p><strong>定义图像的语法是:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url"</span> <span class="attr">alt</span>=<span class="string">"som_text"</span> &gt;</span></span><br></pre></td></tr></table></figure><p><code>src</code> 指 “source”。源属性的值是图像的 URL 地址,或图片的相对路径。</p><p><code>alt</code> 为图像定义一串预备的可替换的文本。在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。</p><p>height（高度） 与 width（宽度）属性用于设置图像的高度与宽度，属性值默认单位为像素，也可以不设置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./mm.jpg"</span> <span class="attr">alt</span>=<span class="string">"这是一个女的"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>个人信息统计<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>身高<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    th<span class="tag">&lt;<span class="name">th</span>&gt;</span>体重<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>王大锤<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>170<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..jpg"</span> <span class="attr">width</span>=<span class="string">"60"</span> <span class="attr">height</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>李小刀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>180<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>58<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;caption&gt;</code> 定义表格标题</p><p><code>&lt;th&gt;</code> 定义表格的表头</p><p><code>&lt;tr&gt;</code> 定义表格的行</p><p><code>&lt;td&gt;</code> 定义表格单元</p><p><code>align=&quot;center&quot;</code> 居中</p><p><code>colspan=&quot;&quot;</code> 合并</p><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.mp3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>controls</code> 属性供添加播放、暂停和音量控件；可以换成<code>autoplay</code> 自动播放；<code>autoplay loop</code>自动循环播放。</p><p><source> 元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>controls</code> 元素提供了 播放、暂停和音量控件来控制视频。</p><p> width 和 height 属性控制视频的尺寸.尽量不要写</p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p><strong>区块元素</strong></p><p>大多数 HTML 元素被定义为<strong>块级元素</strong>或<strong>内联元素</strong>。</p><p>块级元素在浏览器显示时，通常会<u>以新行来开始</u>（和结束）。</p><p>实例: </p><h1>, <p>, <ul>, <table>,<div></div></table></ul></p><p><strong>内联元素</strong></p><p>内联元素在显示时通常<u>不会以新行开始</u>。</p><p>实例: <b>, <td>, <a>, <img></a></td></b></p><p><strong><div> 元素</div></strong></p><p><div> 元素是块级元素，它可用于组合其他 HTML 元素的容器。</div></p><p><strong><span> 元素</span></strong></p><p><span> 元素是内联元素，可用作文本的容器</span></p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p> 表单用于收集不同类型的用户输入。表单是一个包含表单元素的区域。表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。表单使用表单标签 \<form> 来设置</form></p><h4 id="输入元素"><a href="#输入元素" class="headerlink" title="输入元素"></a>输入元素</h4><p>多数情况下被用到的表单标签是输入标签（<input>）。</p><p>输入类型是由类型属性（type）定义的。</p><h4 id="文本域（Text-Fields）"><a href="#文本域（Text-Fields）" class="headerlink" title="文本域（Text Fields）"></a>文本域（Text Fields）</h4><p>文本域通过<input type="text"> 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>必填信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uid"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>&gt;</span>男</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>action</code> “”里面是要提交的地址</p><p><code>method</code> 规定如何发送表单数据（表单数据发送到 action属性所规定的页面）。共有两种方法：post 方法和 get 方法</p><p> – get</p><ul><li>get是从服务器上获取数据</li><li>get是把参数数据队列加到提交表单的action属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到</li><li>get传送的数据量较小。</li><li><p>get安全性非常低。</p><p>– post</p></li><li><p>post是向服务器传送数据</p></li><li>post是通过HTTP post机制,将表单内各个字段与其内容放置在HTML HEADER内一起传送到action属性所指的URL地址。用户看不到这个过程。</li><li>post传送的数据量较大，一般被默认为不受限制。</li><li>post安全性较高。</li></ul><p><code>enctype</code> 属性规定在将表单数据发送到服务器之前如何对其进行编码。</p><p><strong>注意：</strong>只有 method=”post” 时才使用 enctype 属性。</p><p><code>&lt;fieldset&gt;&lt;/fieldset&gt;</code> 定义了一组相关的表单元素，并使用外框包含起来</p><p><code>&lt;legend&gt;&lt;/legend&gt;</code> 定义了 \<fieldset> 元素的标题</fieldset></p><p><code>&lt;label&gt;</code> 定义了 \<input> 元素的标签，一般为输入标题</p><p><code>&lt;input&gt;</code> 输入标签输入类型是由类型属性（type）定义的。</p><p><code>name</code> 属性规定表单的名称,用于在 JavaScript 中引用元素，或者在表单提交之后引用表单数据。</p><p><code>placeholder</code> 属性规定可描述输入字段预期值的简短的提示信息,该提示会在用户输入值之前显示在输入字段中。</p><p><strong>注意：</strong>placeholder 属性适用于下面的 input 类型：text、search、url、tel、email 和 password。</p><p><code>required</code> 属性是一个布尔属性,规定必需在提交表单之前填写输入字段。</p><p><strong>注意：</strong>required 属性适用于下面的 input 类型：text、search、url、tel、email、password、date pickers、number、checkbox、radio 和 file。</p><h4 id="密码字段"><a href="#密码字段" class="headerlink" title="密码字段"></a>密码字段</h4><p>密码字段通过标签<input type="password"> 来定义</p><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><p><code>&lt;input type=&quot;radio&quot;&gt;</code>  标签定义了表单单选框选项</p><p><code>checked</code>选框默认选项</p><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p><input type="checkbox"> 定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span>&gt;</span>游戏</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">checked</span>&gt;</span>阅读</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">checked</span> <span class="attr">disabled</span>&gt;</span>旅游</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span>&gt;</span>运动</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span>&gt;</span>其他</span><br></pre></td></tr></table></figure><p><code>checked disabled</code> 默认必选项,不能取消.</p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photo1"</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>multiple</code> 可接受多个值的文件上传字段</p><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="下拉列表选项"><a href="#下拉列表选项" class="headerlink" title="下拉列表选项"></a>下拉列表选项</h4><p><select>定义了下拉选项列表</select></p><p><option>定义下拉列表中的选项</option></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>籍贯: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>name="prov" </span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>四川<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>云南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>海南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>selected</strong> 默认选项</p><h4 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h4><p><textarea> 标签定义一个多行的文本输入控件。文本区域中可容纳无限数量的文本，其中的文本的默认字体是等宽字体（通常是 Courier）。可以通过 cols 和 rows 属性来规定 textarea 的尺寸大小</textarea></p><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 空格&amp;nbsp;</span><br><span class="line">&lt;小于号&amp;lt;</span><br><span class="line">&gt;大于号&amp;gt;</span><br><span class="line">&amp;和号&amp;amp;</span><br><span class="line">&quot;引号&amp;quot;</span><br><span class="line">&apos;撇号 &amp;apos; (IE不支持)</span><br><span class="line">￠分&amp;cent;</span><br><span class="line">£镑&amp;pound;</span><br><span class="line">¥人民币/日元</span><br><span class="line">€欧元&amp;euro;</span><br><span class="line">§小节&amp;sect;</span><br><span class="line">×乘号&amp;times;</span><br><span class="line">÷除号&amp;divide;</span><br><span class="line">© 版权&amp;copy;</span><br><span class="line">®注册商标   &amp;reg;</span><br><span class="line">™商标&amp;trade;</span><br></pre></td></tr></table></figure><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="什么是-CSS"><a href="#什么是-CSS" class="headerlink" title="什么是 CSS?"></a>什么是 CSS?</h3><ul><li>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li><li>样式定义<strong>如何显示</strong> HTML 元素</li><li>样式通常存储在<strong>样式表</strong>中</li><li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li><li><strong>外部样式表</strong>可以极大提高工作效率</li><li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li><li>多个样式定义可<strong>层叠</strong>为一</li></ul><p>CSS 规则由两个主要的部分构成：<strong><em>选择器</em></strong>，以及一条或多条<strong><em>声明</em></strong>，声明总是以分号(;)结束，声明组以大括号({})括起来</p><ul><li>就近原则</li><li>具体性原则      id选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器 </li><li>重要性原则</li></ul><p><strong>盒子模型</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content（内容） - padding（内边距） - border（边框） - background-image（背景图片） - background-color（背景颜色） - margin（外边距）</span><br></pre></td></tr></table></figure><h3 id="边框和轮廓"><a href="#边框和轮廓" class="headerlink" title="边框和轮廓"></a>边框和轮廓</h3><p><strong>border</strong>        设置对象边框的特性</p><p><strong>border-collapse : collapse</strong>      设置表格的边框合并为一个单一的边框</p><p><strong>border-color</strong>    设置或检索对象的边框颜色</p><p><strong>outline</strong>        设置或检索对象外的线条轮廓。</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><strong>font-size</strong>    设置字体属性</p><p><strong>font-family</strong>    规定文本的字体系列</p><p><strong>font-style</strong>    规定文本的字体尺寸</p><p><strong>font-weight</strong>    规定字体的粗细</p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p><strong>color</strong>        指定文本的颜色</p><p><strong>line-height</strong>    设置行高</p><p><strong>text-align</strong>    规定文本的水平对齐方式</p><p><strong>text-decoration</strong>    规定添加到文本的装饰效果，：none取消下划线</p><h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><p><strong>padding</strong>     简写属性在一个声明中设置所有填充属性。该属性可以有1到4个值</p><p><strong>padding-bottom</strong>        设置元素的底填充<br><strong>padding-left</strong>        设置元素的左填充<br><strong>padding-right</strong>    设置元素的右填充<br><strong>padding-top</strong>        设置元素的顶部填充</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><u>div是不支持background-color 的，background-color是table等的属性，你要用background：#（这里是颜色代码）；这样来写</u></p><p><strong>background</strong>        复合属性，设置对象的背景特性</p><p><strong>background-color</strong>    设置或检索对象的背景颜色<br><strong>background-image</strong>    设置或检索对象的背景图像</p><h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p><strong>margin</strong>        在一个声明中设置所有外边距属性，该属性可以有1到4个值</p><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><p><strong>display：none</strong>    此元素不会被显示。</p><p><strong>display：block</strong>    此元素将显示为块级元素，此元素前后会带有换行符。</p><p><strong>display：inline</strong>    默认。此元素会被显示为内联元素，元素前后没有换行符。</p><p><strong>hidden</strong>    元素是不可见的。</p><h3 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h3><p><strong>list-style</strong>    在一个声明中设置所有的列表属性<br><strong>list-style-position</strong>    设置列表项标记的放置位置</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p><strong>position:static;</strong>     正常文档流</p><p><strong>position:relative;</strong>     相对定位 相对于元素原来的位置定位没有脱离文档流,对兄弟元素没有影响</p><p><strong>position:absolute;</strong>     绝对定位(相对于父元素来设置位置 脱离了文档流</p><p><strong>position:fixd；</strong>  固定定位（相对于浏览器窗口摆放）</p><p><strong>z-index</strong>    属性指定一个元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p><p><strong>float：left</strong>    元素向左浮动。</p><p><strong>float：right</strong>       元素向右浮动。</p><p>黑科技</p><p><strong>overflow: auto;</strong>    如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</p><p><strong>overflow: hidden</strong>  </p><p>兄弟选择器   ~</p><p>相邻兄弟选择器 +</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装字体</span><br><span class="line">@font-face &#123;</span><br><span class="line">font-family: '给字体起个名 ';</span><br><span class="line">src: url(路径);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>​    <strong>ECMAScript</strong> - 语法规范 - ES5                (ECMA欧洲计算机制造商协会)</p><p>​    <strong>BOM</strong> - Browser Object Model - 浏览器对象模型 - window</p><p>​    <strong>DOM</strong> - Document Object Model - 文档对象模型 - document</p><p>编程范式(理念)</p><ul><li>面向对象编程</li><li>函数式编程</li></ul><p>层叠样式表前置, JS后置</p><p>外部脚本不能包含 \<script> 标签。</p><p> <strong>document.getElementById(“some id”)</strong> 。这个方法是 HTML DOM 中定义的, 是用于访问 HTML 元素的正式 W3C 标准<br>x.innerHTML=”Hello JavaScript”;    //改变内容</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><strong>JavaScript 显示数据</strong></p><p>JavaScript 可以通过不同的方式来输出数据：</p><ul><li>使用 <strong>window.alert()</strong> 弹出警告框。   alert() 方法用于显示带有一条指定消息和一个 <strong>确认</strong> 按钮的警告框。</li><li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li><li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li><li>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li></ul><p><strong>操作 HTML 元素</strong></p><p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(<em>id</em>) 方法。</p><p>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值</p><p>JavaScript 对大小写是敏感的</p><p>分号用于分隔 JavaScript 语句。通常我们在每条可执行的语句结尾添加分号。使用分号的另一用处是在一行中编写多条语句。</p><p>在<u>文本字符串中</u>使用反斜杠对代码行进行换行</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释以 // 开头</p><p>多行注释以 /<em> 开始，以 </em>/ 结尾</p><h3 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h3><p><u>简单数据类型</u>:<code>字符串（String）</code> 、<code>数字(Number)</code> 、<code>布尔(Boolean)</code> 、<code>数组(Array)</code> 、</p><p><code>空（Null）</code> 、<code>未定义（Undefined）</code> </p><p><u>复杂数据类型</u>: <code>对象(Object)</code> </p><p>当声明新变量时，可以使用关键词 “new” 来声明其类型：</p><p>JavaScript中有隐式的类型转换</p><p><code>==</code>比较，它会自动转换数据类型再比较</p><p><code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p><p> <code>===(全等于/严格等)</code>    <code>!==(严格不等)</code></p><p>逻辑运算符: </p><p>&amp;&amp;(短路与)            只有所有都为true，&amp;&amp;运算结果才是true，第一个为false后面的不再判断</p><p>||(短路或)            只要其中有一个为true，||运算结果就是true，第一个为true后面的不再判断</p><p>! (非)</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><p>变量在函数内声明，变量为局部作用域。</p><p>局部变量：只能在函数内部访问。</p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>变量在函数外定义，即为全局变量。</p><p>全局变量有 <strong>全局作用域</strong> : 网页中所有脚本和函数均可使用。 </p><p><u>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</u></p><h4 id="JavaScript-变量生命周期"><a href="#JavaScript-变量生命周期" class="headerlink" title="JavaScript 变量生命周期"></a>JavaScript 变量生命周期</h4><p>JavaScript 变量生命周期在它声明时初始化。</p><p>局部变量在函数执行完毕后销毁。</p><p>全局变量在页面关闭后销毁。</p><h3 id="JavaScript全局函数"><a href="#JavaScript全局函数" class="headerlink" title="JavaScript全局函数"></a>JavaScript全局函数</h3><p>isNaN() - 是不是不是一个数</p><p>parseInt() - 取整数如果取不出返回NaN</p><p>parseFloat() - 取小数如果取不出返回NaN</p><p>isFinite() - 是不是有限数值</p><p>eval() - 非常强大的函数 evaluate - XSS(跨站脚本攻击)</p><p>encodeURIComponent() - 处理成百分号编码</p><p>decodeURIComponent() - 将百分号编码解码还原</p><h3 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h3><p>创建 Date 对象： new Date() </p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份</td></tr><tr><td>getMonth()</td><td>从 Date 对象返回月份 (0 ~ 11)</td></tr><tr><td>getDate()</td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)</td></tr><tr><td>getDay()</td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)</td></tr></tbody></table><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p><strong>alert()</strong>          浏览器弹出带有一段消息和一个确认按钮的警告框</p><p><strong>prompt()</strong>    显示可提示用户输入的对话框</p><p>confirm()    显示带有一段消息以及确认按钮和取消按钮的对话框</p><p>open()          打开一个新的浏览器窗口或查找一个已命名的窗口</p><p>close()        关闭浏览器窗口</p><p><strong>setTimeout()</strong>  在指定的毫秒数后调用函数或计算表达式</p><p><strong>setInterval()</strong>    按照指定的周期（以毫秒计）来调用函数或计算表达式</p><p>clearTimeout()     取消由 setTimeout() 方法设置的 timeout</p><p> clearInterval()    取消由 setInterval() 设置的 timeout</p><p>moveTo()      把窗口的左上角移动到一个指定的坐标</p><p>moveBy()    可相对窗口的当前坐标把它移动指定的像素</p><p>resizeBy()    按照指定的像素调整窗口的大小</p><h4 id="window对象属性"><a href="#window对象属性" class="headerlink" title="window对象属性"></a>window对象属性</h4><p><strong>location</strong> - 用于窗口或框架的 Location 对象</p><p>属性:</p><p>location.href        设置或返回当前显示的文档的完整 URL</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(location.href);</span><br></pre></td></tr></table></figure><p>Location 对象方法:</p><p>assign()    载入一个新的文档       // window.location.assign(<em>URL</em>)</p><p>reload()    重新载入当前文档      // location.reload();</p><p>replace()    用新的文档替换当前文档    // location.replace(<em>newURL</em>)</p><p>history - go() / fofward / back</p><p>screen  = avaiwidth / avaiHeight </p><h3 id="Document-对象"><a href="#Document-对象" class="headerlink" title="Document 对象"></a>Document 对象</h3><p><strong>查找元素的方法</strong></p><ul><li><p>getElementById()    返回对拥有指定 id 的第一个对象的引用</p></li><li><p>getElementsByTagName()    返回带有指定标签名的对象集合</p></li><li><p>getElementsByClassName()    返回文档中所有指定类名的元素集合</p></li><li><p>querySelector()    根据指定的选择器查找单个元素</p></li><li><p>querySelectorAll()    根据指定的选择器查找所有元素</p></li></ul><p><strong>绑定事件与取消绑定</strong></p><ul><li>document.addEventListener() 方法用于向文档添加事件句柄 </li><li>document.removeEventListener() 方法来移除 addEventListener() 方法添加的事件句柄 </li><li>element.addEventListener() 方法为指定元素添加事件句柄 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(event, function)</span><br></pre></td></tr></table></figure><p>​    - event    必需。描述事件名称的字符串。’click’ - 当用户点击某个对象时调用的事件句柄 </p><p>​    - function      必需。描述了事件触发后执行的函数 </p><p><strong>修改节点的内容和属性</strong></p><ul><li>textContent / innerHTML / nodeValue</li></ul><p><strong>访问成员运算符</strong> </p><ul><li>setAttribute() / getAttribute() / removeAttribute()</li></ul><p>创建新节点 - ()<br>追加新的子节点 - appendChild() / insertBefore()<br>删除子节点 - removeChild()</p><p>如果已经获得一个节点 如何访问它的父节点、子节点、兄弟节点<br>parentNode<br>children / firstChild / lastChild<br>nextSibling / prevSibling</p><h4 id="DOM事件对象"><a href="#DOM事件对象" class="headerlink" title="DOM事件对象"></a>DOM事件对象</h4><p><strong>鼠标事件</strong> </p><p>onmousedown    鼠标按钮被按下</p><p>target 事件属性可返回事件的目标节点（触发该事件的节点），如生成事件的元素、文档或窗口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.target</span><br></pre></td></tr></table></figure><p>事件捕获 - 从外向里传播事件</p><p>事件冒泡 - 从里向外传播事件</p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p> <strong>jQuery的$函数的作用:</strong></p><p>1、    $(function() {}) -  \$函数中传入的参数是一个函数作用: 绑定页面加载完成之后要执行的回调函数</p><p>2、    $(selector) -  \$函数中传入的参数是一个选择器</p><p>​    作用: 通过选择器获得对应的元素并将其处理成jQuery对象jQuery对象本质是一个数组</p><p>​    如果需要将jQuery对象还原成原生的JS对象一[index]/get(index)</p><p>3、    $(elem) -  \$函数中传入的参数是原生JS对象</p><p>​    作用: 将原生JS对象转换成jQuery对象(更多的属性更多的方法)</p><p>4、    $(tag) - \$函数中传入的参数是一个标签</p><p>​    作用:  和标签对应的元素(得到的是jQuery对身)</p><p>通过jQuery对象的方法可以用更少的代码做更多的事情</p><p>在写代码的时候不需要考虑浏览器兼容性问题(jQuery已经做了处理）</p><p>引入多个JS库出现冲突时可以通过下面的方式让出$函数</p><p>​    jQuery.noConfict() ;</p><p>让出$函数以后原来用\$函数的地方全部换成jQuery</p><p>查找元素</p><ul><li>选择器<ul><li>* / element / #id / .class / selector1, selector2</li><li>ancestor descendant / parent&gt;child / previous+next / previous~siblings </li></ul></li><li>筛选器<ul><li>基本筛选器：:not(selector) / :first / :last / :even / :odd / :eq(index) / :gt(index) / :lt(index) / :animated / :focus</li><li>内容筛选器：:contains(‘…’) / :empty / :parent / :has(selector)</li><li>可见性筛选器：:hidden / :visible</li><li>子节点筛选器：:nth-child(expr) / :first-child / :last-child / :only-child</li><li>属性筛选器：[attribute] / [attribute=’value’] / [attribute!=’value’] / [attribute^=’value’] / [attribute$=’value’] / [attribute|=’value’] / [attribute~=’value’]</li></ul></li><li>表单： :input / :text / :password / :radio / :checkbox / :submit / :image / :reset / :button / :file / :selected / :enabled / :disabled / :checked</li></ul><p>执行操作</p><ul><li>内容操作<ul><li>获取/修改内容：html() / text() / replaceWith() / remove()</li><li>获取/设置元素：before() / after() / prepend() / append() / remove() / clone() / unwrap() / detach() / empty() / add()</li><li>获取/修改属性：attr() / removeAttr() / addClass() / removeClass() / css()</li><li>获取/设置表单值：val()</li></ul></li><li>查找操作<ul><li>查找方法：find() /  parent() / children() / siblings() / next() / nextAll() / prev() / prevAll()</li><li>筛选器：filter() / not() / has() / is() / contains()</li><li>索引编号：eq()</li></ul></li><li>尺寸和位置<ul><li>尺寸相关：height() / width() / innerHeight() / innerWidth() / outerWidth() / outerHeight()</li><li>位置相关：offset() / position() / scrollLeft() / scrollTop()</li></ul></li><li>特效和动画<ul><li>基本动画：show() / hide() / toggle()</li><li>消失出现：fadeIn() / fadeOut() / fadeTo() / fadeToggle()</li><li>滑动效果：slideDown() / slideUp() / slideToggle()</li><li>自定义：delay() / stop() / animate()</li></ul></li><li>事件<ul><li>文档加载：ready() / load()</li><li>用户交互：on() / off()</li></ul></li></ul><p><strong>回调函数</strong> </p><p>evt参数代表的是事件对象 - 绑定了和事件相关的所有信息</p><p>如果事件回调函数中要用到和事件相关的属性和方法就最好指定evt参数</p><ul><li>target / clientX / button / keyCode</li><li>preventDefault() / stopPropagation()</li></ul><p>不管函数是否指定了evt参数当事件发生回调该函数时都会传入该参数</p><p>调构造函数 前面加new</p><p>数组里删元素要从后往前循环</p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>原生Ajax - Asynchronous JavaScript and XML</p><p>让浏览器向服务器发出异步请求(非阻塞式请求)，等服务器返回了响应数据(JSON/XML)后就可以对页面进行局部刷</p><p>新，这样就可以在不中断用户体验的前提下刷新页面数据</p><ul><li>JavaScript发送HTTP请求获取数据默认只支持同源数据(同源策略)</li><li><a href="http://www.abc.com/index.html">http://www.abc.com/index.html</a>  -&gt; JavaScript</li><li>如果要跨域取数据是需要对方提供数据的服务器支持的</li><li>JSONP / 服务器端设置支持跨域取数据(RESTful)</li></ul></script></p></h1></h1>]]></content>
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python学习</title>
      <link href="/2018/05/25/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/25/python%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><code>数字型(Number)</code> <code>字符型(String)</code> <code>布尔型(boolean)</code> <code>空类型(None)</code> <code>列表型(list)</code> <code>元组型(tuple)</code> <code>字典型(dict)</code> <code>集合型(set)</code></p><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>Python3 中有六个标准的数据类型：<br>    Number（数字）<br>    String（字符串）<br>    List（列表）<br>    Tuple（元组）<br>    Dictionary（字典）<br>    Sets（集合）</p><a id="more"></a> <h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>对变量类型进行转换时可以使用Python的内置函数</p><ul><li>int()：将一个数值或字符串转换成整数，可以指定进制。</li><li>float()：将一个字符串转换成浮点数。</li><li>str()：将指定的对象转换成字符串形式，可以指定编码。</li><li>chr()：将整数转换成该编码对应的字符串（一个字符）。</li><li>ord()：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><hr><h3 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h3><p><code>整型(Int)</code> - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。<br><code>浮点型(float)</code>  - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）<br><code>复数(complex)</code>  - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型</p><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><p>函数            返回值 ( 描述 )<br><code>abs(x)</code>            返回数字的绝对值，如abs(-10) 返回 10<br><code>ceil(x)</code>        返回数字的上入整数，如math.ceil(4.1) 返回 5<br><code>cmp(x, y)</code>        如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 Python 3 已废弃 。使用 使用 (x&gt;y)-                         (x&lt;y) 替换。</p><p><code>exp(x)</code>            返回e的x次幂(ex),    如math.exp(1) 返回2.718281828459045<br><code>fabs(x)</code>        返回数字的绝对值，如math.fabs(-10) 返回10.0<br><code>floor(x)</code>        返回数字的下舍整数，如math.floor(4.9)返回 4<br><code>log(x)</code>            如math.log(math.e)返回1.0,math.log(100,10)返回2.0<br><code>log10(x)</code>        返回以10为基数的x的对数，如math.log10(100)返回 2.0<br><code>max(x1, x2,...)</code>    返回给定参数的最大值，参数可以为序列。<br><code>min(x1, x2,...)</code>    返回给定参数的最小值，参数可以为序列。<br><code>modf(x)</code>        返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。<br><code>pow(x, y)</code>        x**y 运算后的值。<br><code>round(x [,n])</code>    返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。<br><code>sqrt(x)</code>        返回数字x的平方根。</p><hr><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p><strong>字符串常用内建函数</strong>        str1 = ‘’hello, world!’</p><p><code>str1.split( )</code>  通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串</p><p><code>len()</code>    len函数计算字符串的长度            <em>len(str1)       # 13</em></p><p><code>str1.capitalize()</code>    获得字符串首字母大写的拷贝         <em>str1.capitalize()  # Hello, world!</em></p><p><code>str1.upper()</code>    获得字符串变大写后的拷贝            <em>str1.upper()   # HELLO, WORLD!</em></p><p><code>str1.find(str2, beg=0 end=len(string))</code>        检测 str2 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;str1 = <span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str1.find(<span class="string">'a'</span>))      <span class="comment"># 从下标0开始，查找在字符串里第一个出现的子串，返回结果：0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str1.find(<span class="string">'a'</span>, <span class="number">1</span>))   <span class="comment"># 从下标1开始，查找在字符串里第一个出现的子串：返回结果3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str1.find(<span class="string">'3'</span>))      <span class="comment"># 查找不到返回-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><code>index(str, beg=0, end=len(string))</code>    跟find()方法一样，只不过如果str不在字符串中会报一个异常.</p><p><code>str1.startswith(str2)</code>        检查字符串<strong>是否</strong>以指定的字符串开头         </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(str1.startswith(<span class="string">'He'</span>))  <span class="comment"># False</span></span><br><span class="line">print(str1.startswith(<span class="string">'hel'</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><code>str1.endswith(str2)</code>        检查字符串<strong>是否</strong>以指定的字符串结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(str1.endswith(<span class="string">'!'</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><code>str1.center(width, &#39;=&#39;)</code>        将字符串以指定的<strong>宽度</strong>居中并在两侧填充指定的<strong>字符</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(str1.center(<span class="number">20</span>, <span class="string">'='</span>)) <span class="comment">#===hello, world!====</span></span><br></pre></td></tr></table></figure><p><u>rjust  ljust 右对齐/左对齐</u></p><p><code>str1.rjust(width, &#39; &#39;)</code>        将字符串以指定的<strong>宽度</strong>靠右放置左侧填充指定的<strong>字符</strong></p><p><code>str1.isdigit()</code>        检查字符串<strong>是否</strong>只由数字构成 ,返回 True 或 False</p><p><code>str1.isalpha()</code>         检查字符串<strong>是否</strong>只由字母构成 ,返回 True 或 False</p><p><code>str1.isalnum()</code>         检查字符串<strong>是否</strong>以数字和字母构成 ,返回 True 或 False</p><p><code>str1.strip()</code>     获得字符串修剪左右两侧空格的拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'      jackf1234@166.com  '</span></span><br><span class="line">print(str1.strip())                    <span class="comment"># jackf1234@166.com</span></span><br></pre></td></tr></table></figure><hr><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>list1 = [1, 3, 5, 7, 100]</p><p><code>len(list1)</code>        列表元素个数</p><p><code>list1.index(obj)</code>     从列表中找出某个值第一个匹配项的索引位置 </p><p><code>max(list1)</code>        返回列表元素最大值</p><p><code>min(list1)</code>        返回列表元素最小值</p><p><code>list(对象)</code>        将对象转换为列表 , 对象:字符串,元组,集合; 字典只能把键转成列表</p><p><code>list1.append(元素)</code>    在列表末尾添加新的元素<br><code>list1.insert(下标, 元素)</code>       在指定下标出添加一个元素,原来位置处的元素往后移动</p><p><code>list1.pop()</code>     将列表中指定<u>下标</u>的元素删除, 如果默认不传递参数,则删除的是最后一个元素</p><p><code>list1.remove()</code>     移除列表中指定的<u>元素</u></p><p><code>list1.clear()</code>     清除列表中所有的元素</p><p><code>list1.reverse()</code>     用于反向列表中元素  等同于[::-1]</p><p><em>reversed(seq) 函数返回一个反转的迭代器。</em> </p><p><em>seq – 要转换的序列，可以是 tuple, string, list 或 range</em></p><p><code>list1.sort()</code>    应用在 list 上的方法, 返回的是对已经存在的列表进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">45</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># print(list1.sort()) 打印为None,没有返回值,只对原来列表排序</span></span><br><span class="line">list2 = list1.sort()</span><br><span class="line">print(list2)  <span class="comment">#结果还是为None </span></span><br><span class="line">print(list1)  <span class="comment">#[1, 2, 4, 7, 21, 45]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#    0  1  2  3  4  5  6  7  8</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">b = a[<span class="number">7</span>:<span class="number">3</span>:<span class="number">-1</span>]</span><br><span class="line">print(b)<span class="comment">#[8, 7, 6, 5]</span></span><br><span class="line">print(a[<span class="number">1</span>:<span class="number">3</span>:<span class="number">-1</span>]) <span class="comment">#None</span></span><br><span class="line">print(a[<span class="number">3</span>:<span class="number">1</span>:<span class="number">-1</span>]) <span class="comment">#[4, 3]</span></span><br></pre></td></tr></table></figure><hr><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合</p><p><code>len(tuple)</code>    计算元组元素个数。</p><p><code>max(tuple)</code>    返回元组中元素最大值。</p><p><code>min(tuple)</code>    返回元组中元素最小值。</p><p><code>tuple(seq)</code>    将列表转换为元组。</p><hr><h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><p><strong>无序集合, key唯一,必须是不可变类型</strong><br>访问获取方式: </p><ul><li>​    dict[key]</li><li>​    dict.get(key)</li></ul><p>添加元素:</p><ul><li>​    dict[key] = value # key为原字典中不存在的键</li></ul><p>修改:</p><ul><li>​    dict[key] = balue # key为原字典中存在的键</li></ul><p>dict.keys() 以列表返回字典中所有的键<br>dict.values() 以列表返回字典中所有的值<br>dict.items() 以列表返回可遍历的(键, 值) 元组数组    [(键, 值), (键, 值), (键, 值)]<br>dict.setdefault() 返回指定键的值,如果键不存在于字典中，将会添加键并将值设为默认值<br>dict.pop([key]) 删除指定键值对, 需传入参数 # 没有remove()方法<br>enumerate()用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><h4 id="字典内置函数"><a href="#字典内置函数" class="headerlink" title="字典内置函数"></a>字典内置函数</h4><p><em>dict1 = {‘name’:’shuaixiaohao’, ‘age’:22, ‘weight’:60}</em></p><p><code>len(dict)</code> 计算字典元素个数，即键的总数。</p><p><em>print(len(dict1))</em>         #  3</p><p><code>str(dict)</code> 输出字典，以可打印的字符串表示。</p><p><em>print(str(dict1))</em>        #{‘name’: ‘shuaixiaohao’, ‘age’: 22, ‘weight’: 60}<br><em>print(type(str(dict1)))</em>    #<class 'str'=""></class></p><p><code>type(variable)</code> 返回输入的变量类型，如果变量是字典就返回字典类型。</p><h4 id="字典内置函数-1"><a href="#字典内置函数-1" class="headerlink" title="字典内置函数"></a>字典内置函数</h4><p><code>radiansdict.clear()</code><br>删除字典内所有元素<br><code>radiansdict.copy()</code><br>返回一个字典的浅复制<br><code>radiansdict.fromkeys()</code><br>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值<br><code>radiansdict.get(key, default=None)</code><br>返回指定键的值，如果值不在字典中返回default值<br><code>key in dict</code><br>如果键在字典dict里返回true，否则返回false<br><code>radiansdict.items()</code><br>以列表返回可遍历的(键, 值) 元组数组<br><code>radiansdict.keys()</code><br>以列表返回一个字典所有的键<br><code>radiansdict.setdefault(key, default=None)</code><br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default<br><code>radiansdict.update(dict2)</code><br>把字典dict2的键/值对更新到dict里<br><code>radiansdict.values()</code><br>以列表返回字典中的所有值<br><code>pop(key[,default])</code><br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。<br><code>popitem()</code><br>随机返回并删除字典中的一对键和值(一般删除末尾对)。</p><hr><h3 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h3><p>set是无序,没有重复元素<br>set集合是不可改变的<br>创建一个空的集合 set1 = set(());    set1 = set([]);    set1 = set({})                                                 <u>注意：如果要创建一个空集合，你必须用 set() 而不是 {} ；后者创建一个空的字典</u><br>set.add(): 增加一个元素(重复元素不能添加) # 没有append()方法<br>set.remove():删除元素, 参数是元素<br>set.pop():删除最后一个元素<br>set1 &amp; set2 交集<br>set1 | set2 并集<br>set1 - set2 差集<br>set1 ^ set2 交并集</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict--&gt;set 取字典的键, 传入集合</span><br><span class="line">set --&gt; dict(错误)  # 不能将集合转换成字典, 只有键, 没有值</span><br></pre></td></tr></table></figure><hr><h3 id="三元条件运算"><a href="#三元条件运算" class="headerlink" title="三元条件运算"></a>三元条件运算</h3><p>python中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value1 <span class="keyword">if</span> condition <span class="keyword">else</span> value2</span><br></pre></td></tr></table></figure><p>JavaScript中:  <strong>conditon ? valuel1 : value2</strong> 问号前面的条件如果成立</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function getStyle(elem) &#123;</span><br><span class="line">return window.getComputedStyle ? window.getComputedStyle(elem): elem.currentStyle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h2><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。</p><p><u>字符串，列表或元组对象都可用于创建迭代器</u></p><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p> <strong>yield</strong> 函数被称为生成器（generator）, 生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器 , 每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。调用一个生成器函数，返回的是一个迭代器对象。</p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>*args    <strong>可变参数</strong>(参数不确定) - 元组</p><p>**kwargs    <strong>关键字参数</strong>(给了参数名和参数值的参数) - 字典 </p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>python 使用 lambda 来创建匿名函数。</p><p>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression  <span class="comment">#arg-参数 ,expression-表达式</span></span><br></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p>变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的</p><ul><li>L （Local） 局部作用域</li><li>E （Enclosing） 闭包函数外的函数中</li><li>G （Global） 全局作用域</li><li>B （Built-in） 内建作用域</li></ul><p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。</p><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域</p><p>global 和 nonlocal关键字</p><p>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.choice():返回列表,元祖,字典中的某一个值</span><br><span class="line">random.choices():返回列表,元祖,字典中的指定个数值个值 k 关键字参数</span><br><span class="line">random.random():返回<span class="number">0</span><span class="number">-1</span>之间的数,  [<span class="number">0</span>, <span class="number">1</span>)  </span><br><span class="line">random.uniform():返回指定的一个区间范围的随机数 [, )</span><br><span class="line">random.randint():返回指定区间范围的随机整数 [, ]</span><br><span class="line">random.shuffle():将列表中的数据进行打乱排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 不定长参数: *args</span><br><span class="line">2. 关键字参数: **kw</span><br><span class="line">3. 偏函数: 导入模块 import functools</span><br><span class="line">        functools.partical()就是创建一个新的函数.不需要自行定义函数.直接将结果赋值给一个变量,而  这个变量就是一个函数.这个函数的目的是将默认参数给固定住</span><br><span class="line">4. 回调函数: 定义函数时,将函数名作为参数传递过来,然后在函数里边再次调用函数</span><br></pre></td></tr></table></figure><h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>\</td><td>匹配字符串的结束\</td><td>.exe\</td><td>匹配字符串的结束\</td><td>.exe</td><td>可以匹配.exe结尾的字符串</td><td></td><td></td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>\</td><td></td><td>分支</td><td>foo\</td><td>bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?\<name>exp)</name></td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.<em>ba.</em>?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td></tr></tbody></table><p><strong>re模块中的核心函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">pattern匹配的正则表达式</span><br><span class="line">string要匹配的字符串</span><br><span class="line">flags标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><hr><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>面向对象的三个基本特征是：封装、继承、多态</strong> </p><p><strong>封装：</strong></p><p>​    封装是实现面向对象程序设计的第一步，封装就是将数据或函数等集合在一个个的单元中（我们称之为类）。被封装的对象通常被称为抽象数据类型。 <strong><em>隐藏复杂的现实细节，暴露简单的调用接口。</em></strong></p><p>封装的意义：<br>　　封装的意义在于保护或者防止代码（数据）被我们无意中破坏。在面向对象程序设计中数据被看作是一个中心的元素并且和使用它的函数结合的很密切，从而保护它不被其它的函数意外的修改。</p><ol><li>保护数据成员，不让类以外的程序直接访问或修改，只能通过提供的公共的接口访问==&gt;数据封装。</li><li>方法的细节对用户是隐藏的，只要接口不变，内容的修改不会影响到外部的调用者==&gt;方法封装。 </li><li>当对象含有完整的属性和与之对应的方法时称为封装。</li><li>从对象外面不能直接访问对象的属性，只能通过和该属性对应的方法访问。</li><li>对象的方法可以接收对象外面的消息。</li></ol><p><strong>继承：</strong></p><p>​    从已有的类创建新类的过程 提供继承信息的称为父类(超类/基类) 得到继承信息的称为子类(派生类)。继承主要实现重用代码，节省开发时间。</p><ol><li>在类名后边的括号里一般写的是基类的类名</li><li>子类中继承自父类(基类),则父类的成员属性和成员方法都可以被子类所继承</li><li>父类中私有的成员属性不能继承给子类的</li></ol><p><strong>多态：</strong></p><p>“一个接口，多种方法”</p><p>​    同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。</p><p>多态的三个条件:</p><ol><li>继承的存在(继承是多态的基础,没有继承就没有多态)</li><li>子类重写父类的方法(多态下调用子类重写的方法)</li><li>父类引用变量指向子类对象(子类到父类的类型转换)</li></ol><p><strong>数据抽象</strong>一找到和对象相关的数据一属性( 名词）</p><p><strong>行为抽象</strong>一  找到和对象相关的行为一方法（动词）</p><p> <strong>__slots__</strong></p><p>​    限定自定义类型的对象只能绑定某些属性，可以通过在类中定义_<em>slots\</em>_变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">'_name'</span>, <span class="string">'_age'</span>, <span class="string">'_gender'</span>)</span><br></pre></td></tr></table></figure><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><p>区分开函数和方法的含义：</p><p>　　1.函数：类外部定义的，跟类没有直接关系的；形式： def func(*argv):</p><p>　　2.方法：class内部定义的函数（对象的方法也可以认为是属性）；分为两种：</p><p>　　　　① python自动产生的（魔法方法）：一般形式为 __func__()，python会在对应的时机自动调用该函数；</p><p>　　　　② 人为自定义的方法：一般和普通函数没有区别，只是定义在了class中而已</p><p>　　3.方法与函数的区别：</p><p>　　　　方法可认为是函数的特殊情况；</p><p>　　　　① 方法定义在class内部</p><p>　　　　② 方法的第一个参数应为 cls(类方法) 或者 self(实例方法)</p><p>列出几个基本魔法方法：</p><p><strong>__new__(cls[,*argv])</strong> </p><ul><li>__new__ 是在一个对象实例化的时候所调用的第一个方法 </li><li>它的第一个参数是这个类，其他的参数是用来直接传递给 __init__ 方法 </li><li>_<em>new__ 决定是否要使用该 \</em>_init__方法，因为 __new__ 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 __new__ 没有返回实例对象，则 __init__ 不会被调用 </li><li>__new__ 主要是用于继承一个不可变的类型比如一个 tuple 或者 string </li></ul><p><strong>__init__(self,[…])</strong> </p><ul><li><p>类的初始化方法 ，当一个实例对象被定义时调用 </p><p>*__del__(self)**    </p></li><li><p>析构器，当一个实例被析构时调用 </p></li><li><p>_<em>new__ 和 \</em>_init__ 是对象的构造器， __del__ 是对象的销毁器 </p></li></ul><h3 id="Python内置装饰器"><a href="#Python内置装饰器" class="headerlink" title="Python内置装饰器"></a>Python内置装饰器</h3><p>在Python中有三个内置的装饰器，都是跟class相关的：<strong>staticmethod</strong>、<strong>classmethod</strong> 和<strong>property</strong>。</p><ul><li><strong>staticmethod</strong> 是类静态方法，其跟成员方法的区别是没有 self 参数，并且可以在类不进行实例化的情况下调用</li><li><strong>classmethod</strong> 与成员方法的区别在于所接收的第一个参数不是 self （类实例的指针），而是cls（当前类的具体类型）</li><li><strong>property</strong> 是属性的意思，表示可以通过通过类实例直接访问的信息</li></ul><p>类方法、静方法        都是通过给类发消息来调用的             </p><p>实例方法                发给对象的消息 在类创建对象后，实例方法才能被使用，使用格式为：对象名.实例方法</p><p>​                    名。实例方法可以使用该方法所在类的所有静态成员和实例成员。 </p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'try...'</span>)</span><br><span class="line">    r = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    print(<span class="string">'result:'</span>, r)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'except:'</span>, e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'finally...'</span>)</span><br><span class="line">print(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p>try语句按照如下方式工作；</p><ul><li>首先，执行try子句（在关键字try和关键字except之间的语句）</li><li>如果没有异常发生，忽略except子句，try子句执行后结束。</li><li>如果在<u>执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略</u>。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。最后执行 try 语句之后的代码。</li><li>如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。</li><li>无论有没有异常<strong>finally</strong>语句被执行。</li></ul><p>一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p><p>处理程序将只针对对应的try子句中的异常进行处理，而不是其他的 try 的处理程序中的异常。</p><p>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line">       <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>​    try except 语句还有一个可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行 </p><p>​    使用 else 子句比把所有的语句都放在 try 子句里面要好，这样可以避免一些意想不到的、而except又没有捕获的异常。<br>    异常处理并不仅仅处理那些直接发生在try子句中的异常，而且还能处理子句中调用的函数（甚至间接调用的函数）里抛出的异常。</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="读、写文件"><a href="#读、写文件" class="headerlink" title="读、写文件"></a>读、写文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(filename, mode)</span><br></pre></td></tr></table></figure><p>mode：决定了打开文件的模式：只读，写入，追加等    </p><p><em>操作模式        具体含义</em><br>    <strong>‘r’</strong>            读取 （默认）<br>    <strong>‘w’</strong>            写入（会先截断之前的内容）<br>    <strong>‘x’</strong>            写入，如果文件已经存在会产生异常<br>    <strong>‘a’</strong>            追加，将内容写入到已有文件的末尾<br>    <strong>‘b’</strong>            二进制模式<br>    <strong>‘t’</strong>            文本模式（默认）<br>    <strong>‘+’</strong>            更新（既可以读又可以写）</p><p><code>with</code>语句来自动帮我们调用<code>close()</code>方法 （关闭文件）</p><p>with 语句就可以保证文件之类的对象在使用完之后一定会正确的执行他的清理方法 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"myfile.txt"</span>) <span class="keyword">as</span> f:</span><br></pre></td></tr></table></figure><h3 id="文件对象的方法"><a href="#文件对象的方法" class="headerlink" title="文件对象的方法"></a>文件对象的方法</h3><p><strong>fileObject.read([size])</strong>  </p><p>​    从文件读取指定的字节数，如果未给定或为负则读取所有。</p><p><strong>fileObject.write()</strong> </p><p>​    写文件 # 如果要写入字符串以外的数据,先将他转换为字符串</p><p><strong>fileObject.close()</strong>  </p><p>​    关闭文件</p><p><strong>fileObject.readline([size])</strong> </p><p>​    读取整行内容,包括\n字符, 如果给定参数则从文件开始读取指定的字符个数</p><p><strong>fileObject.readlines([sizeint])</strong> </p><p>​    读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</p><p><strong>f.tell()</strong> </p><p>​    返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).</p><p><strong>f.seek(偏移量,[起始位置])</strong> </p><p>​    用来移动文件指针 #偏移量:单位:比特,可正可负起始位置:0-文件头,默认值;1-当前位置;2-文件尾</p><h3 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><p><strong>os模块</strong>:在这个模块中给我们封装好了系统操作的功能函数(方法)</p><p>import os </p><ul><li>os.getcwd() 返回当前的工作目录 # 获取绝对路径</li><li>os.listdir(path) 返回指定的文件夹包含的文件或文件夹的名字的列表 </li><li>os.mkdir(path) 在当前目录下创建新的目录</li><li>os.rmdir(path) 删除目录, 只能删除空目录</li><li>os.rename(src, dst) 对文件进行重命名</li><li>os.stat(file) 获取文件属性</li><li>os.remove(file) 删除文件 #可以将本文件删除</li><li>os.path.join(path1, path2) 路径拼接</li><li>os.path.split(path) 拆分路径 # 返回一个元组(目录, 最后一个文件/目录名称)</li><li>os.path.splitext(path) 获取文件的或站名</li><li>os.path.exists(path) 判断文件/目录是否存在</li><li>os.path.isfile(path) 判断是否是文件</li><li>os.path.getsize(file) 获取文件的大小</li><li>os.path.dirname(path) 获取当前文件的目录</li><li>os.path.basename(path) 获取当前文件/目录名</li></ul><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><p>很多时候，数据读写不一定是文件，也可以在内存中读写 </p><ol><li>StringIO模块主要用于在<strong>内存</strong>缓冲区中读写数据。模块是用类编写的，只有一个StringIO类，  </li><li># 所以它的可用方法都在类中。此类中的大部分函数都与对文件的操作方法类似。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">' '</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'world!'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p><strong>getvalue()</strong>方法用于获得写入后的str。 </p><h3 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h3><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p><strong>进程</strong>：是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位 </p><p><strong>线程</strong>：是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源 </p><p>一个程序至少有一个进程,一个进程至少有一个线程。<strong>线程</strong>是最小的执行单元，而<strong>进程</strong>由至少一个线程组成。 </p><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>​    Unix/Linux操作系统提供了一个<strong>fork()</strong>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是<strong>fork()</strong>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。 <u>fork()是os模块里的函数</u>。</p><p>​    子进程永远返回 <strong>0</strong>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<strong>getppid()</strong>就可以拿到父进程的ID。 </p><p><em><u>Windows没有 fork调用</u></em>，<strong>multiprocessing</strong>模块就是跨平台版本的多进程模块。</p><p><strong>multiprocessing</strong>模块提供了一个<strong>Process</strong>类来代表一个进程对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run child process %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())  <span class="comment">#getpid()取得进程识别码</span></span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,))  <span class="comment">#创建一个Process实例</span></span><br><span class="line">    print(<span class="string">'Child process will start.'</span>)</span><br><span class="line">    p.start()  <span class="comment">#启动子进程</span></span><br><span class="line">    p.join()<span class="comment">#等待子进程结束后再继续往下运行</span></span><br><span class="line">    print(<span class="string">'Child process end.'</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parent process <span class="number">928.</span></span><br><span class="line">Process will start.</span><br><span class="line">Run child process test (<span class="number">929</span>)...</span><br><span class="line">Process end.</span><br></pre></td></tr></table></figure><p><em>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code>实例，用 <code>start()</code>方法启动。</em></p><p><em><code>join()</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步</em> </p><h4 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h4><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>Python的标准库提供了两个模块：<code>_thread</code> 和 <code>threading</code>，<code>_thread</code> 是低级模块，<code>threading</code> 是高级模块，对  <code>_thread</code> 进行了封装。绝大多数情况下，我们只需要使用 <code>threading</code> 这个高级模块。 </p><p>启动一个线程就是把一个函数传入并创建 <code>Thread</code> 实例，然后调用 <code>start()</code> 开始执行 </p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>协议- protocol- 通信双方对话的规范和标准</p><p>IP.Internet Protocol- 寻址和路由<br><a href="http://www.baidu.com---&gt;" target="_blank" rel="noopener">www.baidu.com---&gt;</a> 180.97.33.108</p><p>TCP和UDP是在IP协议之上构建的传输协议它们能够提供传输数据的服务<br>TCP提供了可靠传输服务<br>TCP- Transfer Control Protocol<br>握手机制+冗余校验—&gt; 重发一次</p><p>TCP.Transfer Control Protocol  I<br>1.可靠通信[数据不传丢也不传错]<br>滑动窗口机制<br>2.流量控制(自动调节发送数据的速度<br>3.拥塞控制(网络拥堵时会降低发送速度)</p><p>  QQ 微信.应用级<br>QQ— ICQ— OICQ<br>HTTP— Hyper-Text Transfer Protocol<br>HTTPS— Secure<br>SMTP– Simple Mail Transfer Protocol<br>POP3— Post Office Protocol version 3<br>IMAP—Internet Mail Access Protocol<br>xerox— macintosh— Windows</p><p>URL— Uniform Resource Locator<br>协议://域名或IP地址:80/路径/资源名</p><p>网络API(应用程序编程接口) / 网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requests.get()用于请求目标网站，类型是一个HTTPresponse类型</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.status_code) <span class="comment"># 打印状态码</span></span><br><span class="line">print(response.url) <span class="comment"># 打印请求url</span></span><br><span class="line">print(response.headers) <span class="comment"># 打印头信息</span></span><br><span class="line">print(response.cookies) <span class="comment"># 打印cookie信息</span></span><br><span class="line">print(response.text) <span class="comment">#以文本形式打印网页源码</span></span><br><span class="line">print(response.content) <span class="comment">#以字节流形式打印</span></span><br></pre></td></tr></table></figure><h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><p><strong>Socket</strong>是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。 </p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建服务器发文件</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> SEEK_END</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    server = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class="line">    server.bind((<span class="string">'10.7.152.130'</span>, <span class="number">9090</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    print(<span class="string">'服务器启动开始监听...'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'guido.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        f.seek(<span class="number">0</span>, SEEK_END)<span class="comment">#设置文件读取指针在文件当前位置</span></span><br><span class="line">        file_len = f.tell()<span class="comment">#返回文件当前位置指针</span></span><br><span class="line">    <span class="comment"># 4.通过循环接收客户端的连接并作出相应的处理(提供服务)</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># accept方法是一个阻塞方法 如果没有客户端连接到服务器这个方法就会阻塞代码不会向下执行</span></span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="comment"># 5.发送数据</span></span><br><span class="line">        client.send(<span class="string">'guido.jpg'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        client.send(str(file_len).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> total &lt; file_len:</span><br><span class="line">            client.send(data[total:total+<span class="number">1024</span>])</span><br><span class="line">            total += <span class="number">1024</span></span><br><span class="line">            sleep(<span class="number">0.001</span>)</span><br><span class="line">        <span class="comment"># 6.断开连接</span></span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个socket</span></span><br><span class="line">    client = socket()</span><br><span class="line">    <span class="comment"># 建立连接:</span></span><br><span class="line">    client.connect((<span class="string">'10.7.152.130'</span>, <span class="number">9090</span>))</span><br><span class="line">    filename = client.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(filename)</span><br><span class="line">    file_len = int(client.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    print(file_len)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'C:/Users/Administrator/Desktop/'</span> + filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> total &lt; file_len:</span><br><span class="line">            date = client.recv(<span class="number">1024</span>)</span><br><span class="line">            f.write(date)</span><br><span class="line">            total += <span class="number">1024</span></span><br><span class="line">        print(<span class="string">'图片已保存'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h3>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通讯录</title>
      <link href="/2018/05/15/%E9%80%9A%E8%AE%AF%E5%BD%95/"/>
      <url>/2018/05/15/%E9%80%9A%E8%AE%AF%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>用 pymysql 写了一个简单的通讯录。</p><a id="more"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#connection（连接）/ cursor（游标）</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, </span><br><span class="line">                       passwd=<span class="string">'123456'</span>, db=<span class="string">'homework'</span>, charset=<span class="string">'utf8'</span>,</span><br><span class="line">                           cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contacts</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor = conn.cursor()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self)</span>:</span></span><br><span class="line">        name = input(<span class="string">'姓名:'</span>)</span><br><span class="line">        tel = input(<span class="string">'电话号码:'</span>)</span><br><span class="line">        addr = input(<span class="string">'地址:'</span>)</span><br><span class="line">        birth = input(<span class="string">'出生日期:'</span>)</span><br><span class="line">        result = self.cursor.execute(<span class="string">'insert into tb_contacts </span></span><br><span class="line"><span class="string">                 (cname, ctel, caddr, cbirth) values (%s, %s, %s, %s)'</span></span><br><span class="line">                  , (name, tel, addr, birth))</span><br><span class="line">        print(<span class="string">'添加成功'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'添加失败'</span>)</span><br><span class="line">        conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.cursor.execute(<span class="string">'select cname 姓名, ctel 电话, caddr 地址,</span></span><br><span class="line"><span class="string">        cbirth 出生日期 from tb_contacts </span></span><br><span class="line"><span class="string">                     where cname like (%s)'</span>, (name))</span><br><span class="line">        result = self.cursor.fetchone()</span><br><span class="line">        print(result <span class="keyword">if</span> result <span class="keyword">else</span> <span class="string">'没有该联系人'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        name = input(<span class="string">'姓名:'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.search(name):</span><br><span class="line">            result = self.cursor.execute(<span class="string">'delete from tb_contacts </span></span><br><span class="line"><span class="string">                     where cname=%s'</span>, (name,))</span><br><span class="line">            t = input(<span class="string">'确认删除？(确认请输入: y)'</span>)</span><br><span class="line">            <span class="keyword">if</span>  t == <span class="string">'y'</span> <span class="keyword">or</span> t == <span class="string">'Y'</span>:</span><br><span class="line">                print(<span class="string">'删除成功'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'删除失败'</span>)</span><br><span class="line">                conn.commit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'取消删除'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(self)</span>:</span></span><br><span class="line">        name = input(<span class="string">'需要编辑的联系人姓名:'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.search(name):</span><br><span class="line">            judg = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">while</span> judg:</span><br><span class="line">                num = int(input(<span class="string">'请输入编辑项:1.姓名 2.电话 </span></span><br><span class="line"><span class="string">                                3.地址 4.出生日期 5.退出 \n:'</span>))</span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">                    m_name = input(<span class="string">'姓名:'</span>)</span><br><span class="line">                    result = self.cursor.execute(<span class="string">'update tb_contacts </span></span><br><span class="line"><span class="string">                             set cname=%s where cname=%s'</span>,(m_name, name))</span><br><span class="line">                    print(<span class="string">'已更改'</span> <span class="keyword">if</span> result ==<span class="number">1</span> <span class="keyword">else</span> <span class="string">'更改失败'</span>)</span><br><span class="line">                    conn.commit()</span><br><span class="line">                    self.search(m_name)</span><br><span class="line">                <span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">                    m_tel = input(<span class="string">'电话:'</span>)</span><br><span class="line">                    result = self.cursor.execute(<span class="string">'update tb_contacts </span></span><br><span class="line"><span class="string">                            set ctel=%s where cname=%s'</span>, (m_tel, name))</span><br><span class="line">                    print(<span class="string">'已更改'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'更改失败'</span>)</span><br><span class="line">                    conn.commit()</span><br><span class="line">                    self.search(name)</span><br><span class="line">                <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">                    m_addr = input(<span class="string">'地址:'</span>)</span><br><span class="line">                    result = self.cursor.execute(<span class="string">'update tb_contacts </span></span><br><span class="line"><span class="string">                             set caddr=%s where cname=%s'</span>, (m_addr, name))</span><br><span class="line">                    print(<span class="string">'已更改'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'更改失败'</span>)</span><br><span class="line">                    conn.commit()</span><br><span class="line">                    self.search(name)</span><br><span class="line">                <span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">                    m_birth = input(<span class="string">'地址:'</span>)</span><br><span class="line">                    result = self.cursor.execute(<span class="string">'update tb_contacts </span></span><br><span class="line"><span class="string">                             set cbirth=%s where cname=%s'</span>, (m_birth, name))</span><br><span class="line">                    print(<span class="string">'已更改'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'更改失败'</span>)</span><br><span class="line">                    conn.commit()</span><br><span class="line">                    self.search(name)</span><br><span class="line">                <span class="keyword">elif</span> num == <span class="number">5</span>:</span><br><span class="line">                    judg = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'没有该联系人请选择添加'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.execute(<span class="string">'select cname 姓名, ctel 电话, caddr 地址, </span></span><br><span class="line"><span class="string">                   cbirth 出生日期  from tb_contacts'</span>)</span><br><span class="line">        result = self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> result:</span><br><span class="line">            print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'通讯录：\n1.添加 \n2.查询 \n3.删除 \n4.编辑 \n5.查看所有联系人 </span></span><br><span class="line"><span class="string">          \n6.退出 '</span>)</span><br><span class="line">contact = Contacts()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    menu()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                put = int(input(<span class="string">'请输入相应数字操作:'</span>))</span><br><span class="line">                <span class="keyword">if</span> put == <span class="number">1</span>:</span><br><span class="line">                    contact.add()</span><br><span class="line">                <span class="keyword">elif</span> put == <span class="number">2</span>:</span><br><span class="line">                    name = input(<span class="string">'姓名:'</span>)</span><br><span class="line">                    contact.search(name)</span><br><span class="line">                <span class="keyword">elif</span> put == <span class="number">3</span>:</span><br><span class="line">                    contact.delete()</span><br><span class="line">                <span class="keyword">elif</span> put == <span class="number">4</span>:</span><br><span class="line">                    contact.modify()</span><br><span class="line">                <span class="keyword">elif</span> put == <span class="number">5</span>:</span><br><span class="line">                    contact.all()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">elif</span> put == <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                    <span class="comment"># conn.close()</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'输入无效'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 小练习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask</title>
      <link href="/2018/05/15/Flask%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/15/Flask%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="1、flask介绍"><a href="#1、flask介绍" class="headerlink" title="1、flask介绍"></a>1、flask介绍</h2><p>Flask是一个基于Python实现的web开发的’微’框架</p><p> <a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">中文文档地址</a> </p><p>flask流行的主要原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a）有非常齐全的官方文档，上手非常方便</span><br><span class="line">b) 有非常好的拓展机制和第三方的拓展环境，工作中常见的软件都有对应的拓展，自己动手实现拓展也很容易</span><br><span class="line">c) 微型框架的形式给了开发者更大的选择空间</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h3><h4 id="虚拟环境搭建"><a href="#虚拟环境搭建" class="headerlink" title="虚拟环境搭建"></a>虚拟环境搭建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip instatll virtualenv</span><br><span class="line">virtualenv --no-site-packages falskenv</span><br><span class="line"></span><br><span class="line">激活windows下虚拟环境</span><br><span class="line">cd Scripts</span><br><span class="line">activate</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><h3 id="基于flask的最小的应用"><a href="#基于flask的最小的应用" class="headerlink" title="基于flask的最小的应用"></a>基于flask的最小的应用</h3><p>创建hello.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gello_world</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>运行：python hello.py</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><p>Flask类构造函数唯一需要的参数就是应用程序的主模块或包。对于大多数应用程序，Python的<strong>name</strong>变量就是那个正确的、你需要传递的值。Flask使用这个参数来确定应用程序的根目录，这样以后可以相对这个路径来找到资源文件。</p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br></pre></td></tr></table></figure><p>客户端例如web浏览器发送 请求 给web服务，进而将它们发送给Flask应用程序实例。应用程序实例需要知道对于各个URL请求需要运行哪些代码，所以它给Python函数建立了一个URLs映射。这些在URL和函数之间建立联系的操作被称之为 路由 。</p><p>在Flask应程序中定义路由的最便捷的方式是通过显示定义在应用程序实例之上的app.route装饰器，注册被装饰的函数来作为一个 <strong>路由</strong>。</p><h4 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h4><p>在上一个示例给应用程序的根URL注册gello_world()函数作为事件的处理程序。如果这个应用程序被部署在服务器上并绑定了 <a href="http://www.example.com/" target="_blank" rel="noopener">www.example.com</a> 域名，然后在你的浏览器地址栏中输入 <a href="http://www.example.com/" target="_blank" rel="noopener">http://www.example.com</a> 将触发gello_world()来运行服务。客户端接收到的这个函数的返回值被称为 响应 。如果客户端是web浏览器，响应则是显示给用户的文档。</p><p>类似于gello_world()的函数被称作 <strong>视图函数</strong> 。</p><h4 id="动态名称组件路由"><a href="#动态名称组件路由" class="headerlink" title="动态名称组件路由"></a>动态名称组件路由</h4><p>你的Facebook个人信息页的URL是 <a href="http://www.facebook.com/" target="_blank" rel="noopener">http://www.facebook.com/</a> ，所以你的用户名是它的一部分。Flask在路由装饰器中使用特殊的语法支持这些类型的URLs。下面的示例定义了一个拥有动态名称组件的路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello/&lt;name&gt;')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gello_world</span><span class="params">(name)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">'Hello World %s'</span> % name</span><br></pre></td></tr></table></figure><p>用尖括号括起来的部分是动态的部分，所以任何URLs匹配到静态部分都将映射到这个路由。当视图函数被调用，Flask发送动态组件作为一个参数。在前面的示例的视图函数中，这个参数是用于生成一个个性的问候作为响应。</p><p>在路由中动态组件默认为字符串，但是可以定义为其他类型。例如，路由/user/int:id只匹配有一个整数在id动态段的URLs。Flask路由支持int、float</p><p>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello/&lt;int:id&gt;')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gello_stu_id</span><span class="params">(id)</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello World id: %s'</span> % id</span><br></pre></td></tr></table></figure><h4 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>注意： <strong>name</strong> == ‘<strong>main</strong>‘在此处使用是用于确保web服务已经启动当脚本被立即执行。当脚本被另一个脚本导入，它被看做父脚本将启动不同的服务，所以app.run()调用会被跳过。</p><p>一旦服务启动，它将进入循环等待请求并为之服务。这个循环持续到应用程序停止，例如通过按下Ctrl-C。</p><p>有几个选项参数可以给app.run()配置web服务的操作模式。在开发期间，可以很方便的开启debug模式，将激活 debugger 和 reloader 。这样做是通过传递debug为True来实现的。</p><p>run()中参数有如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debug 是否开启调试模式，开启后修改python的代码会自动重启</span><br><span class="line"></span><br><span class="line">port 启动指定服务器的端口号</span><br><span class="line"></span><br><span class="line">host主机，默认是127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="修改启动方式"><a href="#修改启动方式" class="headerlink" title="修改启动方式"></a>修改启动方式</h3><p>修改启动方式，使用命令行参数启动服务</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure><p>调整代码 manager = Manager(app=‘自定义的flask对象’)</p><p>启动的地方 manager.run()</p><h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hellow.py runserver -h 地址 -p 端口 -d -r</span><br></pre></td></tr></table></figure><p>其中：-h表示地址。-p表示端口。-d表示debug模式。-r表示自动重启</p><h3 id="route规则"><a href="#route规则" class="headerlink" title="route规则"></a>route规则</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>写法：converter:variable_name</p><p>converter类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string 字符串</span><br><span class="line">int 整形</span><br><span class="line">float 浮点型</span><br><span class="line">path 接受路径，接收的时候是str，/也当做字符串的一个字符</span><br><span class="line">uuid 只接受uuid字符串</span><br><span class="line">any 可以同时指定多种路径，进行限定</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/helloint/&lt;int:id&gt;/&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getfloat/&lt;float:price&gt;/&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getstr/&lt;string:name&gt;/&apos;，methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getpath/&lt;path:url_path&gt;/&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getbyuuid/&lt;uuid:uu&gt;/&apos;，methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br></pre></td></tr></table></figure><p>实现对应的视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/hello/&lt;name&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_man</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(type(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello name:%s type:%s'</span> % (name, type(name))</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/helloint/&lt;int:id&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_int</span><span class="params">(id)</span>:</span></span><br><span class="line">    print(id)</span><br><span class="line">    print(type(id))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello int: %s'</span> % (id)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/getfloat/&lt;float:price&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_float</span><span class="params">(price)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'float: %s'</span> % price</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/getstr/&lt;string:name&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_name</span><span class="params">(name)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello name: %s'</span> % name</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/getpath/&lt;path:url_path&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_path</span><span class="params">(url_path)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'path: %s'</span> % url_path</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/getuuid/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gello_get_uuid</span><span class="params">()</span>:</span></span><br><span class="line">    a = uuid.uuid4()</span><br><span class="line">    <span class="keyword">return</span> str(a)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/getbyuuid/&lt;uuid:uu&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_uuid</span><span class="params">(uu)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'uu:%s'</span> % uu</span><br></pre></td></tr></table></figure><h4 id="methods请求方法"><a href="#methods请求方法" class="headerlink" title="methods请求方法"></a>methods请求方法</h4><p>常用的请求类型有如下几种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET : 获取</span><br><span class="line">POST : 创建</span><br><span class="line">PUT : 修改(全部属性都修改)</span><br><span class="line">DELETE : 删除</span><br><span class="line">PATCH : 修改(修改部分属性)</span><br></pre></td></tr></table></figure><p>定义url的请求类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/getrequest/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br></pre></td></tr></table></figure><h2 id="2、蓝图"><a href="#2、蓝图" class="headerlink" title="2、蓝图"></a>2、蓝图</h2><h3 id="什么是蓝图"><a href="#什么是蓝图" class="headerlink" title="什么是蓝图"></a>什么是蓝图</h3><p>在Flask项目中可以用Blueprint(蓝图)实现模块化的应用，使用蓝图可以让应用层次更清晰，开发者更容易去维护和开发项目。蓝图将作用于相同的URL前缀的请求地址，将具有相同前缀的请求都放在一个模块中，这样查找问题，一看路由就很快的可以找到对应的视图，并解决问题了。</p><h3 id="使用蓝图"><a href="#使用蓝图" class="headerlink" title="使用蓝图"></a>使用蓝图</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_blueprint</span><br></pre></td></tr></table></figure><h4 id="实例化蓝图应用"><a href="#实例化蓝图应用" class="headerlink" title="实例化蓝图应用"></a>实例化蓝图应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blue = Blueprint(&apos;first&apos;，__name__)</span><br></pre></td></tr></table></figure><p>注意：<u>Blueprint中传入了两个参数，第一个是蓝图的名称，第二个是蓝图所在的包或模块，<strong>name</strong>代表当前模块名或者包名</u></p><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.register_blueprint(blue, url_prefix=&apos;/user&apos;)</span><br></pre></td></tr></table></figure><p>注意：<strong><u>第一个参数即我们定义初始化定义的蓝图对象，第二个参数url_prefix表示该蓝图下，所有的url请求必须以/user开始</u></strong>。这样对一个模块的url可以很好的进行统一管理</p><h4 id="使用蓝图-1"><a href="#使用蓝图-1" class="headerlink" title="使用蓝图"></a>使用蓝图</h4><p>修改视图上的装饰器，修改为@blue.router(‘/’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 视图函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><p>注意：该方法对应的url为127.0.0.1:5000/user/</p><h4 id="url-for反向解析"><a href="#url-for反向解析" class="headerlink" title="url_for反向解析"></a>url_for反向解析</h4><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(&apos;蓝图中定义的第一个参数.函数名&apos;, 参数名=value)</span><br></pre></td></tr></table></figure><p>定义跳转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import url_for, redirect</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/redirect/&apos;)</span><br><span class="line">def make_redirect():</span><br><span class="line">    # 第一种方法</span><br><span class="line">    return redirect(&apos;/hello/index/&apos;)</span><br><span class="line">    # 第二种方法</span><br><span class="line">    return redirect(url_for(&apos;first.index&apos;))</span><br></pre></td></tr></table></figure><h2 id="3、访问请求数据"><a href="#3、访问请求数据" class="headerlink" title="3、访问请求数据"></a>3、访问请求数据</h2><h3 id="请求request"><a href="#请求request" class="headerlink" title="请求request"></a>请求request</h3><p>服务端在接收到客户端的请求后，会自动创建Request对象</p><p>由Flask框架创建，Requesy对象不可修改</p><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url：完整的请求地址</span><br><span class="line">base_url：去掉GET参数的url</span><br><span class="line">host_url：只有主机和端口号的url</span><br><span class="line">path：路由中的路径</span><br><span class="line">method：请求方法</span><br><span class="line">remote_addr：请求的客户端的地址</span><br><span class="line">args：GET请求参数</span><br><span class="line">form：POST请求参数</span><br><span class="line">files：文件上传</span><br><span class="line">headers：请求头</span><br><span class="line">cookies：请求中的cookie</span><br></pre></td></tr></table></figure><h4 id="args–-gt-GET请求参数包装"><a href="#args–-gt-GET请求参数包装" class="headerlink" title="args–&gt;GET请求参数包装"></a>args–&gt;GET请求参数包装</h4><p>a）args是get请求参数的包装，args是一个ImmutableMultiDict对象，类字典结构对象</p><p>b）数据存储也是key-value</p><h4 id="form–-gt-POST请求参数包装"><a href="#form–-gt-POST请求参数包装" class="headerlink" title="form–&gt;POST请求参数包装"></a>form–&gt;POST请求参数包装</h4><p>a）form是post请求参数的包装，args是一个ImmutableMultiDict对象，类字典结构对象</p><p>b）数据存储也是key-value</p><p>重点：ImmutableMultiDict是类似字典的数据结构，但是与字典的区别是，可以存在相同的键。在ImmutableMultiDict中获取数据的方式，dict[‘key’]或者dict.get(‘key’)或者dict.getlist(‘key’)</p><h3 id="响应Response"><a href="#响应Response" class="headerlink" title="响应Response"></a>响应Response</h3><p>Response是由开发者自己创建的</p><p>创建方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import make_response</span><br><span class="line"></span><br><span class="line">make_response创建一个响应，是一个真正的Response对象</span><br></pre></td></tr></table></figure><p>状态码：</p><p>格式：make_reponse(data，code)，其中data是返回的数据内容，code是状态码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a）直接将内容当做make_response的第一个参数，第二个参数直接写返回的状态码</span><br><span class="line"></span><br><span class="line">b）直接在render后加返回的状态码</span><br></pre></td></tr></table></figure><p>例子1：</p><p>定义一个获取GET请求的request的方法，并将返回成功的请求的状态码修改为200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/getrequest/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    print(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'获取request'</span>, <span class="number">200</span></span><br></pre></td></tr></table></figure><p>例子2：</p><p>返回response响应，并添加返回结果的状态码200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/getresponse/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">()</span>:</span></span><br><span class="line">    response = make_response(<span class="string">'&lt;h2&gt;我是响应&lt;/h2&gt;'</span>, <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="重定向-反向解析"><a href="#重定向-反向解析" class="headerlink" title="重定向/反向解析"></a>重定向/反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">'蓝图定义的名称.方法名'</span>)</span><br></pre></td></tr></table></figure><p>例子1:</p><p>定义跳转方法，跳转到get_response的方法上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/getredirect/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_redirect</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'getresponse'</span>)</span><br></pre></td></tr></table></figure><p>例子2：</p><p>使用url_for反向解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect, url_for</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/getredirect/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_redirect</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'first.get_response'</span>))</span><br></pre></td></tr></table></figure><h3 id="终止-异常捕获"><a href="#终止-异常捕获" class="headerlink" title="终止/异常捕获"></a>终止/异常捕获</h3><p>自动抛出异常：abort(状态码)</p><p>捕获异常处理：errorhandler(状态码)，定义的函数中要包含一个参数，用于接收异常信息</p><h4 id="定义终止程序"><a href="#定义终止程序" class="headerlink" title="定义终止程序"></a>定义终止程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/make_abort/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_abort</span><span class="params">()</span>:</span></span><br><span class="line">    abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'终止'</span></span><br></pre></td></tr></table></figure><h4 id="捕获定义的异常"><a href="#捕获定义的异常" class="headerlink" title="捕获定义的异常"></a>捕获定义的异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.errorhandler(400)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(exception)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'捕获到异常信息:%s'</span> % exception</span><br></pre></td></tr></table></figure><h2 id="4、session与cookie"><a href="#4、session与cookie" class="headerlink" title="4、session与cookie"></a>4、session与cookie</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>访问者的标识问题服务器需要识别来自同一访问者的请求。这主要是通过浏览器的cookie实现的。 访问者在第一次访问服务器时，服务器在其cookie中设置一个唯一的ID号——会话ID(session)。 这样，访问者后续对服务器的访问头中将自动包含该信息，服务器通过这个ID号，即可区 隔不同的访问者。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a）客户端会话技术，浏览器的会话技术</span><br><span class="line"></span><br><span class="line">b）数据全部存储在客户端中</span><br><span class="line"></span><br><span class="line">c）存储使用的键值对结构进行存储</span><br><span class="line"></span><br><span class="line">特性：</span><br><span class="line">支持过期时间</span><br><span class="line">默认会自动携带本网站的cookie</span><br><span class="line">不能跨域名</span><br><span class="line">不能跨浏览器</span><br></pre></td></tr></table></figure><p>创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cookie是通过服务器创建的Response来创建的</span><br><span class="line"></span><br><span class="line">设置：set_cookie(&apos;key&apos;, value, max_ages=&apos;&apos;, expires=&apos;&apos;)</span><br><span class="line"></span><br><span class="line">删除, 有三种删除方式</span><br><span class="line"></span><br><span class="line">1. 直接清空浏览器的cookie</span><br><span class="line">2. del_cookie(&apos;key&apos;) 直接使用del_cookie函数</span><br><span class="line">3. set_cookie(&apos;key&apos;,&apos;&apos;,expires=0) 重新设置key的值为空，过期时间为0</span><br></pre></td></tr></table></figure><p>获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在每次请求中，url都会向服务器传递Request，在request中可以获取到cookie的信息</span><br><span class="line"></span><br><span class="line">request.cookies.get(&apos;name&apos;)</span><br></pre></td></tr></table></figure><p>例子1，设置cookie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/setcookie/&apos;)</span><br><span class="line">def set_cookie():</span><br><span class="line">    temp = render_template(&apos;index.html&apos;)</span><br><span class="line">    response = make_response(temp)</span><br><span class="line">outdate=datetime.datetime.today() + datetime.timedelta(days=30)</span><br><span class="line"># 设置cookie中的name的存在时长，设置为30天才过期  </span><br><span class="line">    response.set_cookie(&apos;name&apos;,&apos;cocoococo&apos;,expires=outdate)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure><p>例子2，删除cookie中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/setcookie/&apos;)</span><br><span class="line">def set_cookie():</span><br><span class="line">    temp = render_template(&apos;index.html&apos;)</span><br><span class="line">    response = make_response(temp)</span><br><span class="line"># 第一种方式，通过set_cookie去删除</span><br><span class="line">    response.set_cookie(&apos;name&apos;,&apos;&apos;,expires=0)</span><br><span class="line"># 第二种方式，del_cookie删除</span><br><span class="line">response.del_cookie(&apos;name&apos;)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure><p>例子3，获取cookie中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/getcookie/&apos;)  </span><br><span class="line">def get_cookie():</span><br><span class="line">    name=request.cookies.get(&apos;name&apos;)  </span><br><span class="line">    return name</span><br></pre></td></tr></table></figure><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>flask-session是flask框架的session组件</p><p>该组件则将支持session保存到多个地方</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis：保存数据的一种工具，五大类型。非关系型数据库</span><br><span class="line"></span><br><span class="line">memcached</span><br><span class="line"></span><br><span class="line">mongodb</span><br><span class="line"></span><br><span class="line">sqlalchmey：那数据存到数据库表里面</span><br></pre></td></tr></table></figure><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-session</span><br></pre></td></tr></table></figure><p>如果指定存session的类型为redis的话，需要安装redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>设置session：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session[&apos;key&apos;] = value</span><br></pre></td></tr></table></figure><p>读取session：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = session[&apos;key&apos;] ：如果内容不存在，将会报异常</span><br><span class="line"></span><br><span class="line">result = session.get(&apos;key&apos;) ：如果内容不存在，将返回None</span><br></pre></td></tr></table></figure><p>删除session：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.pop(&apos;key&apos;)</span><br></pre></td></tr></table></figure><p>清空session中所有数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.clear</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>我们在初始化文件中创建一个方法，通过调用该方法来获取到Flask的app对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def create_app():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    # SECRET_KEY 秘钥</span><br><span class="line">    app.config[&apos;SECRET_KEY&apos;] = &apos;secret_key&apos;</span><br><span class="line"># session类型为redis</span><br><span class="line">    app.config[&apos;SESSION_TYPE&apos;] = &apos;redis&apos;</span><br><span class="line"># 添加前缀</span><br><span class="line">app.config[&apos;SESSION_KEY_PREFIX&apos;] = &apos;flask&apos;</span><br><span class="line">    </span><br><span class="line">    # 加载app的第一种方式</span><br><span class="line">    se = Session()</span><br><span class="line">    se.init_app(app=app)</span><br><span class="line">    #加载app的第二种方式</span><br><span class="line">    Session(app=app)</span><br><span class="line">    app.register_blueprint(blueprint=blue)</span><br><span class="line"></span><br><span class="line">    return app</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>定义一个登陆的方法，post请求获取到username，直接写入到redis中，并且在页面中展示出redis中的username</p><p>a）需要先启动redis，开启redis-server，使用redis-cli进入客户端</p><p>b）定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/login/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &apos;GET&apos;:</span><br><span class="line">        username = session.get(&apos;username&apos;)</span><br><span class="line">        return render_template(&apos;login.html&apos;, username=username)</span><br><span class="line">    else:</span><br><span class="line">        username = request.form.get(&apos;username&apos;)</span><br><span class="line">        session[&apos;username&apos;] = username</span><br><span class="line"></span><br><span class="line">        return redirect(url_for(&apos;first.login&apos;))</span><br></pre></td></tr></table></figure><p>c）定义模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;欢迎:&#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;请输入你的名字&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>d）redis中数据</p><p><img src="https://github.com/shuaixiaohao/shuaixiaohao.github.io/blob/master/images/blog-image/flask_session_keys.png?raw=true" alt=""></p><p>注意：我们在定义app.config的时候指定了SESSION_KEY_PREFIX为flask，表示存在session中的key都会加一个前缀名flask </p><p>e)  cookie和session的联系</p><p><img src="https://github.com/shuaixiaohao/shuaixiaohao.github.io/blob/master/images/blog-image/flask_cookie_session.png?raw=true" alt=""></p><p>访问者在第一次访问服务器时，服务器在其cookie中设置一个唯一的ID号——会话ID(session)。 这样，访问者后续对服务器的访问头中将自动包含该信息，服务器通过这个ID号，即可区 隔不同的访问者。然后根据不同的访问者来获取其中保存的value值信息。 </p><h2 id="4、模板"><a href="#4、模板" class="headerlink" title="4、模板"></a>4、模板</h2><h3 id="jinja2"><a href="#jinja2" class="headerlink" title="jinja2"></a>jinja2</h3><p>Flask中使用jinja2模板引擎</p><p>jinja2是由Flask作者开发，模仿Django的模板引擎</p><p>优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">速度快，被广泛使用</span><br><span class="line"></span><br><span class="line">HTML设计和后端python分离</span><br><span class="line"></span><br><span class="line">非常灵活，快速和安全</span><br><span class="line"></span><br><span class="line">提供了控制，继承等高级功能</span><br></pre></td></tr></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>模板语法主要分为两种：<strong>变量</strong>和<strong>标签</strong></p><p>模板中的变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模板中的变量：&#123;&#123; var &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">视图传递给模板的数据</span><br><span class="line"></span><br><span class="line">前面定义出来的数据</span><br><span class="line"></span><br><span class="line">变量不存在，默认忽略</span><br></pre></td></tr></table></figure><p>模板中的标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模板中的标签：&#123;% tag %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">控制逻辑</span><br><span class="line"></span><br><span class="line">使用外部表达式</span><br><span class="line"></span><br><span class="line">创建变量</span><br><span class="line"></span><br><span class="line">宏定义</span><br></pre></td></tr></table></figure><h4 id="结构标签："><a href="#结构标签：" class="headerlink" title="结构标签："></a>结构标签：</h4><p>block</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block xxx %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">块操作</span><br><span class="line">父模板挖坑，子模板填坑</span><br></pre></td></tr></table></figure><p>extends</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends ‘xxx.html’ %&#125;</span><br><span class="line"></span><br><span class="line">继承以后保留块中的内容</span><br><span class="line">&#123;&#123; super() &#125;&#125;</span><br></pre></td></tr></table></figure><p>挖坑继承体现的化整为零的操作</p><p>macro</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro hello(name) %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; name &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">宏定义，可以在模板中定义函数，在其他地方调用</span><br></pre></td></tr></table></figure><p>宏定义可导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">from</span> <span class="string">'xxx'</span> <span class="keyword">import</span> xxx %&#125;</span><br></pre></td></tr></table></figure><p>例子1：</p><p>在<code>index.html</code>中定义macro标签，定义一个方法，然后去调用方法，结果是展示商品的id和商品名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro show_goods(id, name) %&#125;</span><br><span class="line">    商品id：&#123;&#123; id &#125;&#125;</span><br><span class="line">    商品名称：&#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; show_goods(<span class="string">'1'</span>, <span class="string">'娃哈哈'</span>) &#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123; show_goods(<span class="string">'2'</span>, <span class="string">'雪碧'</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>例子2：</p><p>在<code>index.html</code>页面中定义一个say()方法，然后解析该方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro say() %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;今天天气气温回升&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;适合去游泳&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;适合去郊游&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; say() &#125;&#125;</span><br></pre></td></tr></table></figure><p>例子3：</p><p>定义一个<code>function.html</code>中定义一个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro create_user(name) %&#125;</span><br><span class="line">    创建了一个用户:&#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>在<code>index.html</code>中引入<code>function.html</code>中定义的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">from</span> <span class="string">'functions.html'</span> <span class="keyword">import</span> create_user %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; create_user(<span class="string">'小花'</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> item <span class="keyword">in</span> cols %&#125;</span><br><span class="line"></span><br><span class="line">aa</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line"></span><br><span class="line">bb</span><br><span class="line"></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>也可以获取循环信息loop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loop.first</span><br><span class="line"></span><br><span class="line">loop.last</span><br><span class="line"></span><br><span class="line">loop.index</span><br><span class="line"></span><br><span class="line">loop.revindex</span><br></pre></td></tr></table></figure><p>例子:</p><p>在视图中定义一个视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@stu.route('/scores/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scores</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    scores_list = [<span class="number">21</span>,<span class="number">34</span>,<span class="number">32</span>,<span class="number">67</span>,<span class="number">89</span>,<span class="number">43</span>,<span class="number">22</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">    content_h2 = <span class="string">'&lt;h2&gt;今天你们真帅&lt;/h2&gt;'</span></span><br><span class="line">    content_h3 = <span class="string">'   &lt;h3&gt;今天你们真帅&lt;/h3&gt;   '</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'scores.html'</span>,</span><br><span class="line">                           scores=scores_list,</span><br><span class="line">                           content_h2=content_h2,</span><br><span class="line">                           content_h3=content_h3)</span><br></pre></td></tr></table></figure><p>(该视图函数，在下面讲解的过滤器中任然使用其返回的content_h2等参数)</p><p>首先: 在页面中进行解析scores的列表。题目要求：第一个成绩展示为红色，最后一个成绩展示为绿色，其他的不变</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &#123;% <span class="keyword">for</span> score <span class="keyword">in</span> scores %&#125;</span><br><span class="line">        &#123;% <span class="keyword">if</span> loop.first %&#125;</span><br><span class="line">            &lt;li style="color:red;"&gt;&#123;&#123; loop.revindex &#125;&#125;:&#123;&#123; loop.index &#125;&#125;:&#123;&#123; score &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">elif</span> loop.last %&#125;</span><br><span class="line">            &lt;li style="color:green;"&gt;&#123;&#123; loop.revindex &#125;&#125;:&#123;&#123; loop.index &#125;&#125;:&#123;&#123; score &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">            &lt;li&gt; &#123;&#123; loop.revindex &#125;&#125;:&#123;&#123; loop.index &#125;&#125;:&#123;&#123; score &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 变量|过滤器|过滤器... &#125;&#125;</span><br></pre></td></tr></table></figure><p>capitalize 单词首字母大写</p><p>lower 单词变为小写</p><p>upper 单词变为大写</p><p>title</p><p>trim 去掉字符串的前后的空格</p><p>reverse 单词反转</p><p>format</p><p>striptags 渲染之前，将值中标签去掉</p><p>safe 讲样式渲染到页面中</p><p>default</p><p>last 最后一个字母</p><p>first</p><p>length</p><p>sum</p><p>sort</p><p>例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h2 &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h2|safe &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h2|striptags &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3 &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3|length &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3|trim|safe &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3|trim|length &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h3><p><strong>定义基础模板<code>base.html</code></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;</span><br><span class="line">        &#123;% block title %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    &lt;/title&gt;</span><br><span class="line">    &lt;script src="https://code.jquery.com/jquery-3.2.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% block extCSS %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block footer%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extJS %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>定义基础模板<code>base_main.html</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extCSS %&#125;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;css/main.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="静态文件信息配置"><a href="#静态文件信息配置" class="headerlink" title="静态文件信息配置"></a>静态文件信息配置</h3><p><strong>django</strong>：</p><p>第一种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&#123;% static 'css/index.css' %&#125;"</span>&gt;</span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/static/css/index.css"</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>flask</strong>：</p><p>第一种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/static/css/index.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&#123;&#123; url_for('static', filename='css/index.css') &#125;&#125;"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="5、模型"><a href="#5、模型" class="headerlink" title="5、模型"></a>5、模型</h2><h3 id="Flask模型"><a href="#Flask模型" class="headerlink" title="Flask模型"></a>Flask模型</h3><p>Flask默认并没有提供任何数据库操作的API</p><p>我们可以选择任何适合自己项目的数据库来使用</p><p>Flask中可以自己的选择数据，用原生语句实现功能，也可以选择ORM（SQLAlchemy，MongoEngine）</p><p>SQLAlchemy是一个很强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。</p><p>ORM：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将对对象的操作转换为原生SQL</span><br><span class="line">优点</span><br><span class="line">易用性，可以有效减少重复SQL</span><br><span class="line">性能损耗少</span><br><span class="line">设计灵活，可以轻松实现复杂查询</span><br><span class="line">移植性好</span><br></pre></td></tr></table></figure><p>针对于Flask的支持，<a href="http://flask-sqlalchemy.pocoo.org/2.3/" target="_blank" rel="noopener">官网地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure><p>安装驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><p>使用SQLALchemy的对象去创建字段</p><p>其中<strong>tablename</strong>指定创建的数据库的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">创建models.py文件，其中定义模型</span><br><span class="line"></span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(db.Model):</span><br><span class="line"></span><br><span class="line">    s_id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class="line">    s_name = db.Column(db.String(16), unique=True)</span><br><span class="line">    s_age = db.Column(db.Integer, default=1)</span><br><span class="line"></span><br><span class="line">    __tablename__ = &quot;student&quot;</span><br></pre></td></tr></table></figure><p>其中：</p><p>Integer表示创建的s_id字段的类型为整形，</p><p>primary_key表示是否为主键</p><p>String表示该字段为字符串</p><p>unique表示该字段唯一</p><p>default表示默认值</p><p>autoincrement表示是否自增</p><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>在视图函数中我们引入models.py中定义的db</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from App.models import db</span><br><span class="line"></span><br><span class="line">@blue.route(&quot;/createdb/&quot;)</span><br><span class="line">def create_db():</span><br><span class="line">    db.create_all()</span><br><span class="line">    return &quot;创建成功&quot;</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/dropdb/&apos;)</span><br><span class="line">def drop_db():</span><br><span class="line">    db.drop_all()</span><br><span class="line">    return &apos;删除成功&apos;</span><br></pre></td></tr></table></figure><p>其中： db.create_all()表示创建定义模型中对应到数据库中的表</p><p>db.drop_all()表示删除数据库中的所有的表</p><h3 id="初始化SQLALchemy"><a href="#初始化SQLALchemy" class="headerlink" title="初始化SQLALchemy"></a>初始化SQLALchemy</h3><p>在定义的<strong>init</strong>.py文件中使用SQLALchemy去整合一个或多个Flask的应用</p><p>有两种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一种：</span><br><span class="line"></span><br><span class="line">from flask_sqlalchemy import SQLALchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"></span><br><span class="line">from App.models import db</span><br><span class="line"></span><br><span class="line">def create_app():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    return app</span><br></pre></td></tr></table></figure><h3 id="配置数据库的访问地址"><a href="#配置数据库的访问地址" class="headerlink" title="配置数据库的访问地址"></a>配置数据库的访问地址</h3><p><a href="http://www.pythondoc.com/flask-sqlalchemy/config.html" target="_blank" rel="noopener">官网配置参数</a></p><p>数据库连接的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dialect+driver://username:password@host:port/database</span><br><span class="line"></span><br><span class="line">dialect数据库实现</span><br><span class="line"></span><br><span class="line">driver数据库的驱动</span><br></pre></td></tr></table></figure><p>例子： 访问mysql数据库，驱动为pymysql，用户为root，密码为123456，数据库的地址为本地，端口为3306，数据库名称HelloFlask</p><p>设置如下： “mysql+pymysql://root:123456@localhost:3306/HelloFlask”</p><p>在初始化<strong>init</strong>.py文件中如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] = False</span><br><span class="line"></span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &quot;mysql+pymysql://root:123456@localhost:3306/HelloFlask&quot;</span><br></pre></td></tr></table></figure><h3 id="对学生数据进行CRUD操作"><a href="#对学生数据进行CRUD操作" class="headerlink" title="对学生数据进行CRUD操作"></a>对学生数据进行CRUD操作</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名.query.xxx</span><br></pre></td></tr></table></figure><p>获取查询集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all()</span><br><span class="line"></span><br><span class="line">filter(类名.属性名==xxx)</span><br><span class="line"></span><br><span class="line">filter_by(属性名=xxx)</span><br></pre></td></tr></table></figure><p>数据操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在事务中处理，数据插入</span><br><span class="line"></span><br><span class="line">db.session.add(object)</span><br><span class="line"></span><br><span class="line">db.session.add_all(list[object])</span><br><span class="line"></span><br><span class="line">db.session.delete(object)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line">修改和删除基于查询</span><br></pre></td></tr></table></figure><p><strong>想学生表中添加数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/createstu/&apos;)</span><br><span class="line">def create_stu():</span><br><span class="line"></span><br><span class="line">    s = Student()</span><br><span class="line">    s.s_name = &apos;小花%d&apos; % random.randrange(100)</span><br><span class="line">    s.s_age = &apos;%d&apos; % random.randrange(30)</span><br><span class="line"></span><br><span class="line">    db.session.add(s)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    return &apos;添加成功&apos;</span><br></pre></td></tr></table></figure><p>提交事务，使用commit提交我们的添加数据的操作</p><p><strong>获取所有学生信息</strong></p><p>将学生的全部信息获取到，并且返回给页面，在页面中使用for循环去解析即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&quot;/getstudents/&quot;)</span><br><span class="line">def get_students():</span><br><span class="line">    students = Student.query.all()</span><br><span class="line">    return render_template(&quot;StudentList.html&quot;, students=students)</span><br></pre></td></tr></table></figure><p><strong>获取s_id=1的学生的信息</strong></p><p>写法1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_id==1)</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=2)</span><br></pre></td></tr></table></figure><p>注意：filter中可以接多个过滤条件</p><p>写法3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql = &apos;select * from student where s_id=1&apos;</span><br><span class="line">students = db.session.execute(sql)</span><br></pre></td></tr></table></figure><p><strong>修改学生的信息</strong></p><p>写法1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=3).first()</span><br><span class="line">students.s_name = &apos;哈哈&apos;</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student.query.filter_by(s_id=3).update(&#123;&apos;s_name&apos;:&apos;娃哈哈&apos;&#125;)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p><strong>删除一个学生的信息</strong></p><p>写法1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=2).first()</span><br><span class="line">db.session.delete(students)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=1).all()</span><br><span class="line">db.session.delete(students[0])</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>注意：filter_by后的结果是一个list的结果集</p><p><strong>重点注意：在增删改中如果不commit的话，数据库中的数据并不会更新，只会修改本地缓存中的数据，所以一定需要db.session.commit()</strong></p><h2 id="6、模型-一对多"><a href="#6、模型-一对多" class="headerlink" title="6、模型-一对多"></a>6、模型-一对多</h2><h3 id="深入数据库增删改查"><a href="#深入数据库增删改查" class="headerlink" title="深入数据库增删改查"></a>深入数据库增删改查</h3><p>定义模型，并定义初始化的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student(db.Model):</span><br><span class="line"></span><br><span class="line">    s_id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class="line">    s_name = db.Column(db.String(16), unique=True)</span><br><span class="line">    s_age = db.Column(db.Integer, default=1)</span><br><span class="line"></span><br><span class="line">    __tablename__ = &quot;student&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.s_name = name</span><br><span class="line">        self.s_age = age</span><br></pre></td></tr></table></figure><h4 id="增–批量增加"><a href="#增–批量增加" class="headerlink" title="增–批量增加"></a>增–批量增加</h4><p>第一种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/createstus/&apos;)</span><br><span class="line">def create_users():</span><br><span class="line">    stus = []</span><br><span class="line">    for i in range(5):</span><br><span class="line"># 实例化Student的对象</span><br><span class="line">        s = Student()</span><br><span class="line"># 对象的属性赋值</span><br><span class="line">        s.s_name = &apos;张三%s&apos; % random.randrange(10000)</span><br><span class="line">        s.s_age = &apos;%d&apos; % random.randrange(100)</span><br><span class="line">        stus.append(s)</span><br><span class="line"># 添加需要创建的数据</span><br><span class="line">    db.session.add_all(stus)</span><br><span class="line"># 提交事务到数据库</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    return &apos;创建成功&apos;</span><br></pre></td></tr></table></figure><p>注：在创建单条数据的时候使用db.session.add()，在创建多条数据的时候使用db.session.add_all()</p><p>第二种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/createstus/&apos;)</span><br><span class="line">def create_users():</span><br><span class="line">    stus = []</span><br><span class="line">    for i in range(5):</span><br><span class="line"># 使用类的初始化去创建Student对象</span><br><span class="line">        s = Student(&apos;张三%s&apos; % random.randrange(10000),</span><br><span class="line">                    &apos;%d&apos; % random.randrange(100))</span><br><span class="line">        stus.append(s)</span><br><span class="line"></span><br><span class="line">    db.session.add_all(stus)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    return &apos;创建成功&apos;</span><br></pre></td></tr></table></figure><h4 id="查–使用运算符"><a href="#查–使用运算符" class="headerlink" title="查–使用运算符"></a>查–使用运算符</h4><p>获取查询集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter(类名.属性名.运算符(‘xxx’))</span><br><span class="line"></span><br><span class="line">filter(类名.属性 数学运算符  值)</span><br></pre></td></tr></table></figure><p>运算符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">contains： 包含</span><br><span class="line">startswith：以什么开始</span><br><span class="line">endswith：以什么结束</span><br><span class="line">in_：在范围内</span><br><span class="line">like：模糊</span><br><span class="line">__gt__: 大于</span><br><span class="line">__ge__：大于等于</span><br><span class="line">__lt__：小于</span><br><span class="line">__le__：小于等于</span><br></pre></td></tr></table></figure><p>筛选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">offset()</span><br><span class="line"></span><br><span class="line">limit()</span><br><span class="line"></span><br><span class="line">order_by()</span><br><span class="line"></span><br><span class="line">get()</span><br><span class="line"></span><br><span class="line">first()</span><br><span class="line"></span><br><span class="line">paginate()</span><br></pre></td></tr></table></figure><p>逻辑运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">与</span><br><span class="line">and_</span><br><span class="line">filter(and_(条件),条件…)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">or_</span><br><span class="line">filter(or_(条件),条件…)</span><br><span class="line"></span><br><span class="line">非</span><br><span class="line">not_</span><br><span class="line">filter(not_(条件),条件…)</span><br></pre></td></tr></table></figure><p>例子1：</p><ol><li><p>查询学生的id为3，4，5，6，16的的学生信息，使用<strong>in_逻辑运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/getstubyids/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stu_by_ids</span><span class="params">()</span>:</span></span><br><span class="line">   </span><br><span class="line">students = Student.query.filter(Student.s_id.in_([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">16</span>]))</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'StudentList.html'</span>, students=students)</span><br></pre></td></tr></table></figure></li><li><p>查询学生的年龄小于18岁的学生的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.query.filter(Student.s_age &lt; 18)</span><br></pre></td></tr></table></figure></li><li><p>查询学生的年龄小于18岁的学生的信息，<strong><strong>lt</strong>小于</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_age.__lt__(15))</span><br></pre></td></tr></table></figure></li><li><p>查询学生的年龄小于等于18岁的学生的信息，<strong><strong>le</strong>小于等于</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_age.__le__(15))</span><br></pre></td></tr></table></figure></li><li><p>查询学生的姓名以什么开始或者以什么结尾的学生的信息<strong>startswith和endswith</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_name.startswith(&apos;张&apos;))</span><br><span class="line">students = Student.query.filter(Student.s_name.endswith(&apos;2&apos;))</span><br></pre></td></tr></table></figure></li><li><p>查询id=4的学生的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student.query.get(4)</span><br><span class="line">获取的结果是学生的对象</span><br></pre></td></tr></table></figure></li><li><p>模糊搜索like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%：代表一个或者多个</span><br><span class="line">_：代表一个</span><br><span class="line"></span><br><span class="line">Student.query.filter(Student.s_name.like(&apos;%张%&apos;))</span><br></pre></td></tr></table></figure></li><li><p>分页，查询第二页的数据4条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个参数是那一页，第二个参数是一页的条数，第三个参数是是否输出错误信息</span><br><span class="line">students = Student.query.paginate(2, 4, False).items</span><br></pre></td></tr></table></figure></li></ol><p>例子2：</p><p>跳过offset几个信息，截取limit结果的几个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 按照id降序排列</span><br><span class="line">stus = Student.query.order_by(&apos;-s_id&apos;)</span><br><span class="line"></span><br><span class="line"># 按照id降序获取三个</span><br><span class="line">stus = Student.query.order_by(&apos;-s_id&apos;).limit(3)</span><br><span class="line"></span><br><span class="line"># 获取年龄最大的一个</span><br><span class="line">stus = Student.query.order_by(&apos;-s_age&apos;).first()</span><br><span class="line"></span><br><span class="line"># 跳过3个数据，查询5个信息</span><br><span class="line">stus = Student.query.order_by(&apos;-s_age&apos;).offset(3).limit(5)</span><br><span class="line"></span><br><span class="line"># 跳过3个数据</span><br><span class="line">stus = Student.query.order_by(&apos;-s_age&apos;).offset(3)</span><br><span class="line"></span><br><span class="line"># 获取id等于24的学生</span><br><span class="line">stus = Student.query.filter(Student.s_id==24)</span><br><span class="line">stus = Student.query.get(24)</span><br></pre></td></tr></table></figure><p>例子3：</p><ol><li><p>查询</p><p>from sqlalchemy import and_, or_, not_</p><p><strong>查询多个条件</strong></p><p>stus = Student.query.filter(Student.s_age==18, Student.s_name==’雅典娜’)</p><p><strong>and_ 并且条件</strong></p><p>stus = Student.query.filter(and_(Student.s_age==18, Student.s_name==’雅典娜’))</p><p><strong>or_ 或者条件</strong></p><p>stus = Student.query.filter(or_(Student.s_age==18, Student.s_name==’火神’))</p><p><strong>not_ 非</strong></p><p>stus = Student.query.filter(not_(Student.s_age==18), Student.s_name==’火神’)</p></li></ol><p>例子4：</p><p><strong>分页：</strong></p><p><img src="https://github.com/shuaixiaohao/shuaixiaohao.github.io/blob/master/images/blog-image/flask_sqlalchemy_paginate.png?raw=true" alt=""></p><p>后端数据处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询第几页的数据</span><br><span class="line">page = int(request.args.get(&apos;page&apos;, 1))</span><br><span class="line"></span><br><span class="line"># 每一页的条数多少，默认为10条</span><br><span class="line">per_page = int(request.args.get(&apos;per_page&apos;, 10))</span><br><span class="line"></span><br><span class="line"># 查询当前第几个的多少条数据</span><br><span class="line">paginate = Student.query.order_by(&apos;-s_id&apos;).paginate(page, per_page, error_out=False)</span><br><span class="line"></span><br><span class="line">stus = paginate.items</span><br></pre></td></tr></table></figure><p>前端数据展示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;学生信息&lt;/h2&gt;</span><br><span class="line">&#123;% for stu in stus %&#125;</span><br><span class="line">    id：&#123;&#123; stu.s_id &#125;&#125;</span><br><span class="line">    姓名：&#123;&#123; stu.s_name &#125;&#125;</span><br><span class="line">    年龄：&#123;&#123; stu.s_age &#125;&#125;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">总页数: &#123;&#123; paginate.pages &#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">一共&#123;&#123; paginate.total &#125;&#125;条数据</span><br><span class="line">&lt;br&gt;</span><br><span class="line">当前页数：&#123;&#123; paginate.page &#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;% if paginate.has_prev %&#125;</span><br><span class="line">    &lt;a href=&quot;/stupage/?page=&#123;&#123; paginate.prev_num &#125;&#125;&quot;&gt;上一页&lt;/a&gt;：&#123;&#123; paginate.prev_num &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if paginate.has_next %&#125;</span><br><span class="line">    &lt;a href=&quot;/stupage/?page=&#123;&#123; paginate.next_num &#125;&#125;&quot;&gt;下一页&lt;/a&gt;：&#123;&#123; paginate.next_num &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">页码：&#123;% for i in  paginate.iter_pages() %&#125;</span><br><span class="line">        &lt;a href=&quot;/stupage/?page=&#123;&#123; i &#125;&#125;&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><h4 id="一对多建立模型"><a href="#一对多建立模型" class="headerlink" title="一对多建立模型"></a>一对多建立模型</h4><p>学生模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student(db.Model):</span><br><span class="line"></span><br><span class="line">    s_id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class="line">    s_name = db.Column(db.String(20), unique=True)</span><br><span class="line">    s_age = db.Column(db.Integer, default=18)</span><br><span class="line">    s_g = db.Column(db.Integer, db.ForeignKey(&apos;grade.g_id&apos;), nullable=True)</span><br><span class="line"></span><br><span class="line">    __tablename__ = &apos;student&apos;</span><br></pre></td></tr></table></figure><p>班级模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Grade(db.Model):</span><br><span class="line"></span><br><span class="line">    g_id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class="line">    g_name = db.Column(db.String(10), unique=True)</span><br><span class="line">    g_desc = db.Column(db.String(100), nullable=True)</span><br><span class="line">    g_time = db.Column(db.Date, default=datetime.now)</span><br><span class="line">    students = db.relationship(&apos;Student&apos;, backref=&apos;stu&apos;, lazy=True)</span><br><span class="line"></span><br><span class="line">    __tablename__ = &apos;grade&apos;</span><br></pre></td></tr></table></figure><p>官网解释有如下几个lazy的参数：</p><p>lazy 决定了 SQLAlchemy 什么时候从数据库中加载数据:，有如下四个值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select/<span class="keyword">True</span>: (which <span class="keyword">is</span> the default) means that SQLAlchemy will load the data <span class="keyword">as</span> necessary <span class="keyword">in</span> one go using a standard select statement.</span><br><span class="line"></span><br><span class="line">joined/<span class="keyword">False</span>: tells SQLAlchemy to load the relationship <span class="keyword">in</span> the same query <span class="keyword">as</span> the parent using a JOIN statement.</span><br><span class="line"></span><br><span class="line">subquery: works like ‘joined’ but instead SQLAlchemy will use a subquery.</span><br><span class="line"></span><br><span class="line">dynamic: <span class="keyword">is</span> special <span class="keyword">and</span> useful <span class="keyword">if</span> you have many items. Instead of loading the items SQLAlchemy will <span class="keyword">return</span> another query object which you can further refine before loading the items. This <span class="keyword">is</span> usually what you want <span class="keyword">if</span> you expect more than a handful of items <span class="keyword">for</span> this relationship</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select就是访问到属性的时候，就会全部加载该属性的数据。</span><br><span class="line"></span><br><span class="line">joined则是在对关联的两个表进行join操作，从而获取到所有相关的对象。</span><br><span class="line"></span><br><span class="line">dynamic则不一样，在访问属性的时候，并没有在内存中加载数据，而是返回一个query对象, 需要执行相应方法才可以获取对象，</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><ol><li><p>通过班级查询学生信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@grade.route(&apos;/selectstubygrade/&lt;int:id&gt;/&apos;)</span><br><span class="line"></span><br><span class="line">def select_stu_by_grade(id):</span><br><span class="line">    grade = Grade.query.get(id)</span><br><span class="line"># 通过班级对象.定义的relationship变量去获取学生的信息</span><br><span class="line">    stus = grade.students</span><br><span class="line"></span><br><span class="line">    return render_template(&apos;grade_student.html&apos;,</span><br><span class="line">                           stus=stus,</span><br><span class="line">                           grade=grade</span><br><span class="line">                           )</span><br></pre></td></tr></table></figure></li><li><p>通过学生信息查询班级信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@stu.route(&apos;/selectgradebystu/&lt;int:id&gt;/&apos;)</span><br><span class="line">   </span><br><span class="line">def select_grade_by_stu(id):</span><br><span class="line">   </span><br><span class="line">    stu = Student.query.get(id)</span><br><span class="line"># 通过学生对象.定义的backref参数去获取班级的信息</span><br><span class="line">    grade = stu.stu</span><br><span class="line"></span><br><span class="line">    return render_template(&apos;student_grade.html&apos;,</span><br><span class="line">                           grade=grade,</span><br><span class="line">                           stu=stu)</span><br></pre></td></tr></table></figure></li></ol><p>注意：表的外键由db.ForeignKey指定，传入的参数是表的字段。db.relations它声明的属性不作为表字段，第一个参数是关联类的名字，backref是一个反向身份的代理,相当于在Student类中添加了stu的属性。例如，有Grade实例dept和Student实例stu。dept.students.count()将会返回学院学生人数;stu.stu.first()将会返回学生的学院信息的Grade类实例。一般来讲db.relationship()会放在一这一边。</p><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><p>在django中继承了makemigrations，可以通过migrate操作去更新数据库，修改我们定义的models，然后在将模型映射到数据库中。</p><p>在flask中也有migrate操作，它能跟踪模型的变化，并将变化映射到数据库中</p><h4 id="安装migrate"><a href="#安装migrate" class="headerlink" title="安装migrate"></a>安装migrate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></figure><h4 id="配置使用migrate"><a href="#配置使用migrate" class="headerlink" title="配置使用migrate"></a>配置使用migrate</h4><p>初始化，使用app和db进行migrate对象的初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from flask_migrate import Migrate</span><br><span class="line"></span><br><span class="line">#绑定app和数据库</span><br><span class="line">Migrate(app=app, db=db)</span><br></pre></td></tr></table></figure><p>安装了flask-script的话，可以在Manager()对象上添加迁移指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask_migrate import Migrate, MigrateCommand</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">manage = Manager(app=app)</span><br><span class="line"></span><br><span class="line">manage.add_command(&apos;db&apos;, MigrateCommand)</span><br></pre></td></tr></table></figure><p>操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db init  初始化出migrations的文件，只调用一次</span><br><span class="line"></span><br><span class="line">python manage.py db migrate  生成迁移文件</span><br><span class="line"></span><br><span class="line">python manage.py db upgrade 执行迁移文件中的升级</span><br><span class="line"></span><br><span class="line">python manage.py db downgrade 执行迁移文件中的降级</span><br><span class="line"></span><br><span class="line">python manage.py db --help 帮助文档</span><br></pre></td></tr></table></figure><h2 id="7、模型-多对多"><a href="#7、模型-多对多" class="headerlink" title="7、模型-多对多"></a>7、模型-多对多</h2><h3 id="关联关系—多对多"><a href="#关联关系—多对多" class="headerlink" title="关联关系—多对多"></a>关联关系—多对多</h3><p>定义模型：</p><p>引入SLALchemy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br></pre></td></tr></table></figure><p>创建中间表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc = db.Table(&apos;sc&apos;,</span><br><span class="line">    db.Column(&apos;s_id&apos;, db.Integer, db.ForeignKey(&apos;student.s_id&apos;), primary_key=True),</span><br><span class="line">    db.Column(&apos;c_id&apos;, db.Integer, db.ForeignKey(&apos;courses.c_id&apos;), primary_key=True)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建学生类Student</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Student(db.Model):</span><br><span class="line"></span><br><span class="line">    s_id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class="line">    s_name = db.Column(db.String(20), unique=True)</span><br><span class="line">    s_age = db.Column(db.Integer, default=18)</span><br><span class="line">    s_g = db.Column(db.Integer, db.ForeignKey(&apos;grade.g_id&apos;), nullable=True)</span><br><span class="line"></span><br><span class="line">    __tablename__ = &apos;student&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line"></span><br><span class="line">        self.s_name = name</span><br><span class="line">        self.s_age = age</span><br><span class="line">        self.s_g = None</span><br></pre></td></tr></table></figure><p>创建课程表的模型，Course类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Course(db.Model):</span><br><span class="line"></span><br><span class="line">    c_id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class="line">    c_name = db.Column(db.String(20), unique=True)</span><br><span class="line">    students = db.relationship(&apos;Student&apos;,</span><br><span class="line">                               secondary=sc,</span><br><span class="line">                               backref=&apos;cou&apos;)</span><br><span class="line"></span><br><span class="line">    __tablename__ = &apos;courses&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line"></span><br><span class="line">        self.c_name = name</span><br></pre></td></tr></table></figure><p>sc表由<strong>db.Table声明</strong>，我们不需要关心这张表，因为这张表将会由SQLAlchemy接管，它唯一的作用是作为students表和courses表关联表，所以必须在db.relationship()中指出<strong>sencondary关联表参数</strong>。lazy是指查询时的惰性求值的方式，这里有详细的参数说明，而db.backref是声明反向身份代理，其中的lazy参数是指明反向查询的惰性求值方式.</p><p>添加学生和课程之间的关系</p><p>通过页面中传递学生的id和课程的id，分别获取学生的对象和课程的对象，在使用关联关系append去添加学生对象，并且add以后再commit后，就可以在中间表sc中查看到新增的关联关系了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">userid = request.form.get(&apos;userid&apos;)</span><br><span class="line">   courseid = request.form.get(&apos;courseid&apos;)</span><br><span class="line"></span><br><span class="line">   stu = Student.query.get(userid)</span><br><span class="line">   cou = Course.query.get(courseid)</span><br><span class="line"></span><br><span class="line">   cou.students.append(stu)</span><br><span class="line">   db.session.add(cou)</span><br><span class="line">   db.session.commit()</span><br></pre></td></tr></table></figure><p>删除学生和课程之间的关系</p><p>通过页面获取传递的学生的id和课程的id，分别获取学生对象和课程对象，在使用关联关系remove去删除学生对象，并commit将事务提交到数据库中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.query.get(s_id)</span><br><span class="line">cou = Course.query.get(c_id)</span><br><span class="line"></span><br><span class="line">cou.students.remove(stu)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>通过课程查询学生的信息</p><p>以下定义在课程course的模型中，所以通过课程查询学生的信息，语法为课程的对象.studengs。如果知道学生的信息反过来找课程的信息，则使用backref的反向关联去查询，语语法为学生的对象.cou(反向)</p><p>students = db.relationship(‘Student’,secondary=sc,backref=’cou’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cou = Course.query.get(2)</span><br><span class="line">stus = cou.students</span><br></pre></td></tr></table></figure><p>通过学生去查询课程的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.query.get(id)</span><br><span class="line">cous = stu.cou</span><br></pre></td></tr></table></figure><h2 id="8、插件"><a href="#8、插件" class="headerlink" title="8、插件"></a>8、插件</h2><p>开发，页面调试工具debugtoolbar</p><p>1.1 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-debugtoolbar</span><br></pre></td></tr></table></figure><p>1.2 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">from flask_debugtoolbar import DebugToolbarExtension</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">app.config[&apos;SECRET_KEY&apos;] = &apos;&lt;replace with a secret key&gt;&apos;</span><br><span class="line"></span><br><span class="line">toolbar = DebugToolbarExtension(app)</span><br></pre></td></tr></table></figure><h3 id="2-restful"><a href="#2-restful" class="headerlink" title="2. restful"></a>2. restful</h3><p>Flask-RESTful 提供的最主要的基础就是资源(resources)。资源(Resources)是构建在 Flask 可拔插视图 之上，只要在你的资源(resource)上定义方法就能够容易地访问多个 HTTP 方法</p><p><a href="http://www.pythondoc.com/Flask-RESTful/quickstart.html" target="_blank" rel="noopener">官网</a>上描述了一个最简单的restful风格的api，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask.ext import restful</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = restful.Api(app)</span><br><span class="line"></span><br><span class="line">class HelloWorld(restful.Resource):</span><br><span class="line">    def get(self):</span><br><span class="line">        return &#123;&apos;hello&apos;: &apos;world&apos;&#125;</span><br><span class="line"></span><br><span class="line">api.add_resource(HelloWorld, &apos;/&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug=True)</span><br></pre></td></tr></table></figure><p>2.1 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_restful</span><br></pre></td></tr></table></figure><p>2.2 配置</p><p>在create_app()获取Flask(<strong>name</strong>)对象中，设置如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from flask_restful import Api</span><br><span class="line"></span><br><span class="line">api = Api()</span><br><span class="line"></span><br><span class="line">api.init_app(app=app)</span><br></pre></td></tr></table></figure><p>在views中需要引入配置的api还有Resource</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 导入包和restful中的Api对象</span><br><span class="line">from flask_restful import Resource</span><br><span class="line">from utils.functions import api</span><br><span class="line"></span><br><span class="line"># 定义类，启动包含了对数据处理的GET,POST,PATCH,PUT,DELETE请求</span><br><span class="line">class CreateCourse(Resource):</span><br><span class="line"></span><br><span class="line">def get(self, id):</span><br><span class="line">    course = Course.query.get(id)</span><br><span class="line">    return course.to_dict()</span><br><span class="line"></span><br><span class="line">def post(self):</span><br><span class="line"></span><br><span class="line">    courses = [&apos;大学英语&apos;, &apos;大学物理&apos;, &apos;线性代数&apos;, &apos;高数&apos;,</span><br><span class="line">               &apos;VHDL&apos;, &apos;ARM&apos;, &apos;马克思主义&apos;, &apos;农场劳动&apos;]</span><br><span class="line">    course_list = []</span><br><span class="line">    for course in courses:</span><br><span class="line">        c = Course()</span><br><span class="line">        c.c_name = course</span><br><span class="line">        course_list.append(c)</span><br><span class="line">    db.session.add_all(course_list)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    courses = Course.query.all()</span><br><span class="line">    return [course.to_dict() for course in courses]</span><br><span class="line"></span><br><span class="line">def patch(self, id):</span><br><span class="line">    c_name = request.form.get(&apos;c_name&apos;)</span><br><span class="line">    course = Course.query.get(id)</span><br><span class="line">    course.c_name = c_name</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return &#123;&apos;code&apos;: 200, &apos;data&apos;: course.to_dict(), &apos;msg&apos;: &apos;请求成功&apos;&#125;</span><br><span class="line"></span><br><span class="line">def delete(self, id):</span><br><span class="line">    course = Course.query.get(id)</span><br><span class="line">    db.session.delete(course)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return &#123;&apos;code&apos;: 200, &apos;msg&apos;: &apos;删除成功&apos;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 绑定处理url</span><br><span class="line">api.add_resource(CreateCourse, &apos;/api/course/&lt;int:id&gt;/&apos;, &apos;/api/course/&apos;)</span><br></pre></td></tr></table></figure><p>2.3 端点(Endpoints)</p><p>在一个 API 中，你的资源可以通过多个 URLs 访问。你可以把多个 URLs 传给 Api 对象的 Api.add_resource() 方法。每一个 URL 都能访问到你的 Resource</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api.add_resource(CreateCourse, &apos;/api/course/&lt;int:id&gt;/&apos;, &apos;/api/course/&apos;)</span><br></pre></td></tr></table></figure><p>2.4 返回响应</p><p>Flask-RESTful 支持视图方法多种类型的返回值。同 Flask 一样，你可以返回任一迭代器，它将会被转换成一个包含原始 Flask 响应对象的响应。Flask-RESTful 也支持使用多个返回值来设置响应代码和响应头</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get(self, id):</span><br><span class="line">    course = Course.query.get(id)</span><br><span class="line">    return course.to_dict(), 200</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
